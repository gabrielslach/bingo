[{"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\index.js":"1","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\CreateRoom.js":"2","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\ListBox.js":"3","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\CardView.js":"4","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\reportWebVitals.js":"5","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\util\\utilityFunctions.js":"6","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\util\\usePlayerLogin.js":"7","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\util\\useClassicGameAdmin.js":"8","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin.js":"9","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\Card.js":"10","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Classic\\DeckView.js":"11","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\Card.js":"12","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\util\\appContext.js":"13","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\Cards.js":"14","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\NameDrawerView.js":"15","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\App.js":"16","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Classic\\DeckViewLogin.js":"17","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\PlayerDeckView.js":"18","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Lobby.js":"19","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Dashboard.js":"20","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Classic\\CardView.js":"21"},{"size":517,"mtime":1616074349088,"results":"22","hashOfConfig":"23"},{"size":1849,"mtime":1616076412512,"results":"24","hashOfConfig":"23"},{"size":1132,"mtime":1616074349124,"results":"25","hashOfConfig":"23"},{"size":2845,"mtime":1616074349122,"results":"26","hashOfConfig":"23"},{"size":375,"mtime":1616074349125,"results":"27","hashOfConfig":"23"},{"size":731,"mtime":1616228720166,"results":"28","hashOfConfig":"23"},{"size":3659,"mtime":1616142165760,"results":"29","hashOfConfig":"23"},{"size":3893,"mtime":1616173067650,"results":"30","hashOfConfig":"23"},{"size":7288,"mtime":1616173679523,"results":"31","hashOfConfig":"23"},{"size":1556,"mtime":1616171996962,"results":"32","hashOfConfig":"23"},{"size":1864,"mtime":1616145476899,"results":"33","hashOfConfig":"23"},{"size":1546,"mtime":1616074349120,"results":"34","hashOfConfig":"23"},{"size":200,"mtime":1616076412521,"results":"35","hashOfConfig":"23"},{"size":922,"mtime":1616074349123,"results":"36","hashOfConfig":"23"},{"size":1661,"mtime":1616074349125,"results":"37","hashOfConfig":"23"},{"size":1838,"mtime":1616140354445,"results":"38","hashOfConfig":"23"},{"size":3094,"mtime":1616145427558,"results":"39","hashOfConfig":"23"},{"size":2966,"mtime":1616173392777,"results":"40","hashOfConfig":"23"},{"size":2530,"mtime":1616076412519,"results":"41","hashOfConfig":"23"},{"size":6073,"mtime":1616076412515,"results":"42","hashOfConfig":"23"},{"size":2461,"mtime":1616076412507,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"ksewuh",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"51"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"51"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"51"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\index.js",[],["101","102"],"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\CreateRoom.js",[],"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\ListBox.js",[],["103","104"],"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\CardView.js",[],"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\reportWebVitals.js",[],["105","106"],"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\util\\utilityFunctions.js",["107"],"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\util\\usePlayerLogin.js",["108"],"import { useContext } from \"react\";\r\n\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { useCookies } from 'react-cookie';\r\n\r\nimport { postRequest } from \"./utilityFunctions\";\r\n\r\nconst displayToast = (message, type, displayDuration) => {\r\n  toast(message, {\r\n    position: toast.POSITION.TOP_CENTER,\r\n    type: type,\r\n    autoClose: displayDuration,\r\n  });\r\n};\r\n\r\nexport default function useClassicGameAdmin(vars) { // You could use this var to set something on the local state.\r\n\r\n  var timeOutVar;\r\n\r\n  //states\r\n  \r\n  const [cookies, setCookie] = useCookies(['loginToken', 'userInfo']);\r\n\r\n  /*************** Dont edit below this line ***************/\r\n  function startTimeout() {\r\n    timeOutVar = setTimeout(function () {\r\n    console.log(\"Server Timeout\");\r\n    }, 120000);\r\n  }\r\n\r\n  function stopTimeout() {\r\n    clearTimeout(timeOutVar);\r\n  }\r\n\r\n  const onRequestSuccess = (req, resData, onSuccess) => {\r\n    const { data, oFlag, oMessage } = resData;\r\n    if (oFlag) {\r\n        onSuccess(data);\r\n    } else {\r\n        console.log(req, ': ', oMessage);\r\n    };\r\n    \r\n    displayToast(\r\n        oMessage,\r\n        oFlag ? toast.TYPE.SUCCESS : toast.TYPE.ERROR,\r\n        2500\r\n        );\r\n  };\r\n\r\n  const onRequestFail = (req, status) => {\r\n    console.log(\r\n      \"Server Error: Please contact your server administrator.\",\r\n    );\r\n    \r\n    displayToast(\r\n        status || 'Server Error',\r\n        toast.TYPE.ERROR,\r\n        2500\r\n        );\r\n  };\r\n\r\n  const makePostRequest = (req, api, dataparam, loginToken, onSuccess) => {\r\n    postRequest(api, dataparam, loginToken)\r\n      .then((res) => {\r\n        stopTimeout();\r\n        if (res.status !== 200 && res.status !== 201) {\r\n          onRequestFail(req, res.status);\r\n        } else {\r\n          onRequestSuccess(req, res.data, onSuccess);  \r\n        }\r\n      })\r\n      .catch((err) => {\r\n        stopTimeout();\r\n        console.log(\"makePostRequest_err: \", err);\r\n      });\r\n  };\r\n\r\n  /*************** Dont edit above this line ***************/\r\n\r\n  const makeRequest = (req, vars = {}) => {\r\n    var api = \"\";\r\n    var dataparam = {};\r\n    let onSuccess = () => {};\r\n\r\n    const {\r\n      roomId = '',\r\n      playerId = '',\r\n      password\r\n  } = vars;\r\n\r\n    startTimeout();\r\n    switch (req) {\r\n      // case \"get-player\":\r\n      //   const {playerId} = vars;\r\n      //   api = \"get-player\";\r\n      //   dataparam = {playerId}; // This are the parameters or arguments supplied on the post request.\r\n      //   onSuccess = (data) => { // This is a callback that executes at post request success. i.e. data is the res.data returned by the server\r\n            \r\n      //   }\r\n      //   break;\r\n    case \"login\" :\r\n        api = \"login\";\r\n        dataparam = {roomId, password};\r\n        onSuccess = (data) => {\r\n            const {loginToken} = data;\r\n            const maxAge = 24 * 60 * 60;\r\n            \r\n            setCookie('loginToken', loginToken, { path: '/', maxAge });\r\n            window.location.reload();\r\n        };\r\n        break;\r\n    case \"player-login\" :\r\n        api = \"player-login\";\r\n        dataparam = {roomId, userId : playerId, playerCode: password};\r\n        onSuccess = (data) => {\r\n            const {loginToken, roomId, userId} = data;\r\n            const maxAge = 7 * 24 * 60 * 60;\r\n            \r\n            setCookie('loginToken', loginToken, { path: '/', maxAge });\r\n            setCookie('userInfo', {roomId, userId}, { path: '/', maxAge });\r\n        };\r\n        break;\r\n      default:\r\n    }\r\n    if (req !== \"\" || typeof req !== \"undefined\") makePostRequest(req, api, dataparam, '', onSuccess);\r\n  };\r\n\r\n  return [\r\n    cookies,\r\n    makeRequest,\r\n  ];\r\n}\r\n",["109","110"],"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\util\\useClassicGameAdmin.js",["111"],"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin.js",["112","113","114"],"import React, {useEffect, useState} from 'react';\r\n\r\nimport {Grid, TextField, Button, Paper, Typography, Dialog, DialogTitle, DialogContent, DialogActions} from '@material-ui/core';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles'\r\n\r\nimport useClassicGameAdmin from '../../util/useClassicGameAdmin';\r\nimport usePlayerLogin from '../../util/usePlayerLogin';\r\nimport PlayerDeckView from './Admin/PlayerDeckView';\r\nimport CardView from './CardView';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        padding: theme.spacing(1),\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    paperRoot: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center'\r\n    },\r\n    deckViewGrid: {\r\n        minWidth: '66.7%'\r\n    }\r\n}));\r\n\r\nconst CssTextField = withStyles({\r\n    root: {\r\n      \r\n      '& label.Mui-focused': {\r\n        color: 'rgba(255,248,6,0.8)',\r\n      },\r\n      '& label': {\r\n        color: 'rgba(255,255,255,0.8)',\r\n      },\r\n      '&:hover label': {\r\n        color: 'rgba(255,248,6,0.8)',\r\n      },\r\n      '& .MuiOutlinedInput-root': {\r\n        color: 'rgba(255,255,255,0.8)',\r\n        '& fieldset': {\r\n          borderColor: 'rgba(255,255,255,0.4)',\r\n        },\r\n        '&:hover fieldset': {\r\n          borderColor: 'rgba(255,248,6,0.4)',\r\n        },\r\n        '&.Mui-focused fieldset': {\r\n          borderColor: 'rgba(255,248,6,0.8)',\r\n        },\r\n      },\r\n    },\r\n  })(TextField);\r\n\r\nfunction ClassicAdmin(props) {\r\n    const {roomId} = props;\r\n    const classes = useStyles();\r\n\r\n    const [cookies, setPlayerLogin] = usePlayerLogin();\r\n    const  [cards = [], players = [], setClassicGameAdmin] = useClassicGameAdmin();\r\n    const [filteredList, setFilteredList] = useState([])\r\n    const [selectedCard, setSelectedCard] = useState({});\r\n    const [openCardDialog, setOpenCardDialog] = useState(false);\r\n\r\n    const handleCreatePlayer = e => {\r\n        e.preventDefault();\r\n        const {name, email, noOfCards} = e.target;\r\n        setClassicGameAdmin('register-player', {\r\n            name: name.value,\r\n            email: email.value,\r\n            noOfCards: noOfCards.value,\r\n            roomId\r\n        });\r\n    };\r\n\r\n    const handleAdminLogin = e => {\r\n        e.preventDefault();\r\n        const password = e.target.password.value;\r\n        setPlayerLogin('login', {roomId, password});\r\n    };\r\n\r\n    const filterFx = searchTxt => item => {\r\n        const {id, name, email} = item.player;\r\n\r\n        const itemToString = `${id} ${name} ${email}`;\r\n\r\n        return (itemToString.toUpperCase().indexOf(searchTxt.toUpperCase()) >= 0);\r\n    }\r\n\r\n    const handleSearch = e => {\r\n        e.preventDefault();\r\n        const searchText = e.target.searchText.value;\r\n        if (searchText.length > 0) {\r\n          const filtered = players.filter(filterFx(searchText));\r\n          setFilteredList(filtered);\r\n        } else {\r\n            setFilteredList(players);\r\n        }\r\n    };\r\n\r\n    const handleSelectCard = (card) => {\r\n        setSelectedCard(card);\r\n        setOpenCardDialog(true);\r\n    };\r\n\r\n    const handleCloseCardDialog = () => {\r\n        setOpenCardDialog(false);\r\n        setSelectedCard({});\r\n    }\r\n\r\n    useEffect(() => {\r\n      if (cookies.loginToken) {\r\n        setClassicGameAdmin(\"get-player-all\", { roomId });\r\n      }\r\n    }, [cookies]);\r\n    \r\n    useEffect(() => {\r\n        setFilteredList(players);\r\n      }, [players]);\r\n\r\n    return (\r\n        <Grid container direction='column' justify='center' alignItems='center' spacing={2} className={classes.root}>\r\n        <Grid item md={6} sm={10} xs={12}>\r\n    <Paper classes={{root: classes.paperRoot}}>\r\n        <Grid container direction='column' justify='center' alignItems='center' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h3'>Room {roomId} Game Master</Typography>\r\n            </Grid>\r\n            {!cookies.loginToken ? \r\n                <Grid item>\r\n                    <form onSubmit={handleAdminLogin}>\r\n                    <Grid container direction='row' spacing={1} justify='center' alignItems='center'>\r\n                        <Grid item md={6} sm={12}>\r\n                            <TextField variant='outlined' label='Password' name='password' type='password' margin=\"dense\" fullWidth/>\r\n                        </Grid>\r\n                        <Grid item md={2} sm={12}>\r\n                            <Button variant='contained' type='submit' fullWidth>Login</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    </form>\r\n                </Grid>\r\n            :\r\n            <React.Fragment>\r\n                <Grid item>\r\n                    <form onSubmit={handleCreatePlayer}>\r\n                    <Grid container direction='row' spacing={1} justify='center' alignItems='center'>\r\n                        <Grid item md={3} sm={12}>\r\n                            <TextField variant='outlined' label='Name' name='name' margin=\"dense\" fullWidth/>\r\n                        </Grid>\r\n                        <Grid item md={4} sm={12}>\r\n                            <TextField variant='outlined' label='Email' name='email' margin=\"dense\" fullWidth/>\r\n                        </Grid>\r\n                        <Grid item md={3} sm={12}>\r\n                            <TextField variant='outlined' label='No of Cards' name='noOfCards' margin=\"dense\" fullWidth/>\r\n                        </Grid>\r\n                        <Grid item md={2} sm={12}>\r\n                            <Button variant='contained' type='submit' fullWidth>Create Player</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    </form>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant='contained'>Game Draw</Button>\r\n                </Grid>\r\n            </React.Fragment>\r\n            }\r\n        </Grid>\r\n    </Paper>\r\n    </Grid>\r\n    <Grid item xs={12}>\r\n        <form onSubmit={handleSearch}>\r\n            <Grid container direction='row' spacing={1} alignItems='center'> \r\n                <Grid item>\r\n                    <CssTextField\r\n                        label=\"Search Player\"\r\n                        variant=\"outlined\"\r\n                        size='small'\r\n                        id=\"custom-css-outlined-input\"\r\n                        name='searchText'\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button type='submit' variant='contained' fullWidth>Search</Button>\r\n                </Grid>\r\n            </Grid>  \r\n        </form>\r\n    </Grid>\r\n    {filteredList.map(item => (\r\n        <Grid item  md={8} sm={12} xs={12} key={`${item.player.id}-deck-view`} className={classes.deckViewGrid} >\r\n            <PlayerDeckView items={item.cards} playerInfo={item.player} onSelectCard={handleSelectCard} />\r\n        </Grid>\r\n    ))}\r\n    <Dialog open={openCardDialog} onClose={handleCloseCardDialog}>\r\n        <DialogContent>\r\n            <CardView items={selectedCard.cells} cardId={selectedCard.id} />\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button onClick={handleCloseCardDialog}>Close</Button>\r\n            <Button variant='contained'>Simulate</Button>\r\n        </DialogActions>\r\n    </Dialog>\r\n    </Grid>\r\n    )\r\n  }\r\n\r\n  export default ClassicAdmin;","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\Card.js",[],"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Classic\\DeckView.js",["115"],"import React, {useEffect} from 'react';\r\nimport {\r\n    useParams,\r\n    useRouteMatch\r\n  } from \"react-router-dom\";\r\n\r\n  \r\nimport {Grid, Typography} from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CardView from './CardView'\r\n\r\nimport useClassicGameAdmin from '../../util/useClassicGameAdmin';\r\nimport usePlayerLogin from '../../util/usePlayerLogin';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        marginTop: theme.spacing(2)\r\n    },\r\n    headers: {\r\n        marginLeft: theme.spacing(1)\r\n    }\r\n}));\r\n\r\nfunction DeckView(props) {\r\n    const {roomId} = props;\r\n    const match = useRouteMatch();\r\n\r\n    const classes = useStyles();\r\n\r\n    const {playerId} = useParams();\r\n    \r\n    const [cards = [], players = [], setClassicGameAdmin ] = useClassicGameAdmin();\r\n    const [cookies] = usePlayerLogin();\r\n\r\n    useEffect(()=> {\r\n        if (cookies.loginToken) {\r\n            setClassicGameAdmin('get-player', {playerId, roomId});\r\n        } else {\r\n            const rootPath = match.path.split('/:roomId/:playerId')[0]\r\n            window.location.assign(`${rootPath}/${roomId}`)\r\n        };\r\n    }, [cookies]);\r\n    \r\n    return (\r\n        <Grid container direction='row' alignItems = 'center' spacing={2} className={classes.root}>\r\n            <Grid item className={classes.headers}>\r\n                <Typography variant='h6'><b>Welcome {players.name}!</b></Typography>\r\n                <Typography variant='subtitle2'>Player ID: {players.id}</Typography>\r\n            </Grid>\r\n            {cards.map(item => (\r\n                <Grid item key={`${playerId}-card-${item.id}`} lg={3} md={4} sm={6} xs={12}>\r\n                    <CardView items={item.cells} cardId={`${roomId}-${item.id}`}/>\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n        \r\n    )\r\n  }\r\n\r\n  export default DeckView;","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\Card.js",[],"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\util\\appContext.js",[],["116","117"],"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\Cards.js",[],["118","119"],"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\NameDrawerView.js",["120","121","122","123"],"import React, {useState} from 'react'\r\n\r\nimport {Grid, List, ListItem, ListItemText, Typography, Button} from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        minHeight: '100%'\r\n    },\r\n    list: {\r\n        maxHeight: '100%'\r\n    }\r\n}))\r\n\r\nconst filterFunc = (pickedNames) => (val) => {\r\n    return (!pickedNames.includes(val))\r\n}\r\n\r\nfunction NameDrawerView(props) {\r\n    const {ariaLabel = 'picked list', names = [], pickedNames = [], setPickedNames} = props;\r\n    const [disabled, setDisabled] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const [pickedName, setPickedName] = useState('')\r\n\r\n    const draw = () => {\r\n        const pickedNames_copy = [...pickedNames]\r\n        const pool = names.filter(filterFunc(pickedNames))\r\n        const random_index = Math.floor(Math.random() * pool.length)\r\n\r\n        console.log(pool[random_index])\r\n        if (random_index >= pool.length) {\r\n            setDisabled(true)\r\n            return;\r\n        }\r\n\r\n        pickedNames_copy.unshift(pool[random_index])\r\n\r\n        setPickedName(pool[random_index])\r\n        setPickedNames(pickedNames_copy)\r\n    }\r\n\r\n    return(\r\n        <Grid container direction='column' justify='flex-start' className={classes.root}>\r\n            <Grid item>\r\n                <Typography variant='h4'>{pickedName || 'BINGO Picker'}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Button variant='contained' disabled={disabled} onClick={()=>draw()} >Draw a Name</Button>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default NameDrawerView;","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\App.js",["124","125"],"import './App.css';\r\n\r\nimport React, {useState} from 'react'\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\n\r\nimport { CookiesProvider } from 'react-cookie';\r\n\r\nimport Dashboard from './pages/Dashboard'\r\nimport CreateRoom from './pages/CreateRoom'\r\nimport Lobby from './pages/Lobby'\r\nimport ClassicAdmin from './pages/Classic/Admin'\r\nimport ClassicDeckView from './pages/Classic/DeckView'\r\nimport ClassicDeckViewLogin from './pages/Classic/DeckViewLogin'\r\n\r\nfunction Home() {\r\n  const [roomID, setRoomID] = useState(null) //create custom hook once grew\r\n  return (\r\n    <>\r\n      {roomID === null && <CreateRoom setRoomID={setRoomID}/>}\r\n      {roomID !== null && <Dashboard roomID={roomID}/>}\r\n      </>\r\n  );\r\n}\r\n\r\nfunction GameRoom() {\r\n  const {roomId} = useParams();\r\n  const match = useRouteMatch();\r\n  return (\r\n  <Switch>\r\n    <Route path={`${match.path}/admin`}>\r\n      <ClassicAdmin roomId={roomId} />\r\n    </Route>\r\n    <Route path={`${match.path}/:playerId`}>\r\n      <ClassicDeckView roomId={roomId} />\r\n    </Route>\r\n    <Route path={`${match.path}/`}>\r\n      <ClassicDeckViewLogin roomId={roomId} />\r\n    </Route>\r\n  </Switch>);\r\n}\r\n\r\nfunction ClassicBingo() {\r\n  const match = useRouteMatch();\r\n  return(\r\n    <Switch>\r\n      <Route path={`${match.path}/:roomId`}>\r\n        <GameRoom/>\r\n      </Route>\r\n      <Route path={`${match.path}/`}>\r\n        <Lobby/>\r\n      </Route>\r\n    </Switch>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <CookiesProvider>\r\n      <Router>\r\n        <Switch>\r\n          <Route path='/classic'>\r\n            <ClassicBingo/>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            {/* <Home/> */}\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </CookiesProvider>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Classic\\DeckViewLogin.js",["126","127","128"],"import React, {useEffect} from 'react';\r\n\r\nimport {Grid, TextField, Button, Paper, Typography} from '@material-ui/core';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\n\r\nimport {useRouteMatch} from 'react-router-dom';\r\n\r\nimport usePlayerLogin from '../../util/usePlayerLogin';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        padding: theme.spacing(1),\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    paperRoot: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center'\r\n    },\r\n}));\r\n\r\nfunction DeckViewLogin(props) {\r\n    const {roomId} = props;\r\n    const match = useRouteMatch();\r\n\r\n    const classes = useStyles();\r\n\r\n    const [cookies, setPlayerLogin] = usePlayerLogin();\r\n\r\n    const handleAdminLogin = e => {\r\n        e.preventDefault();\r\n        const password = e.target.password.value;\r\n        const playerId = e.target.playerId.value;\r\n        setPlayerLogin('player-login', {roomId, playerId, password});\r\n    }\r\n\r\n    useEffect(() => {\r\n      if (cookies.loginToken && cookies.userInfo) {\r\n          const {roomId, userId} = cookies.userInfo;\r\n          if (match.path) {\r\n          const rootPath = match.path.split('/:roomId/')[0];\r\n          window.location.assign(`${rootPath}/${roomId}/${userId}`);\r\n        };\r\n      }\r\n    }, [cookies]);\r\n\r\n    // Temporary for UPSCA purpose\r\n    useEffect(()=>{\r\n        if (roomId === 'upsca') {\r\n            const rootPath = match.path.split('/:roomId/')[0]\r\n            window.location.assign(`${rootPath}/UPSCA`)\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n    <Grid container direction='column' justify='center' alignItems='center' spacing={2} className={classes.root}>\r\n        <Grid item md={6} sm={10} xs={12}>\r\n            <Paper classes={{root: classes.paperRoot}}>\r\n                <Grid container direction='column' justify='center' alignItems='center' spacing={2}>\r\n                    <Grid item>\r\n                        <Typography variant='h3'>Room {roomId} Player Login</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <form onSubmit={handleAdminLogin}>\r\n                        <Grid container direction='row' spacing={1} justify='center' alignItems='center'>\r\n                            <Grid item md={6} sm={12}>\r\n                                <TextField variant='outlined' label='Player ID' name='playerId' margin=\"dense\" fullWidth/>\r\n                            </Grid>\r\n                            <Grid item md={6} sm={12}>\r\n                                <TextField variant='outlined' label='Password' name='password' type='password' margin=\"dense\" fullWidth/>\r\n                            </Grid>\r\n                            <Grid item md={12} sm={12}>\r\n                                <Button variant='contained' type='submit' fullWidth>Login</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        </form>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n    </Grid>\r\n    )\r\n  }\r\n\r\n  export default DeckViewLogin;","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\PlayerDeckView.js",[],"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Lobby.js",["129"],"import React from 'react'\r\n\r\nimport {Paper, Typography, TextField, Grid, Button} from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        padding: theme.spacing(1),\r\n        height: '100%'\r\n    },\r\n    paperRoot: {\r\n        padding: theme.spacing(2)\r\n    }\r\n    \r\n}))\r\n\r\nfunction Lobby(props) {\r\n    const {setRoomID} = props;\r\n    const classes = useStyles();\r\n\r\n    const handleCreateRoom = () => {\r\n        //const roomID = createRoom();\r\n        //setRoomID(roomID);\r\n    }\r\n\r\n    return(\r\n        <Grid container direction='row' justify='center' alignItems='center' className={classes.root}>\r\n            <Grid item md={6} sm={10} xs={12}>\r\n        <Paper classes={{root: classes.paperRoot}}>\r\n            <Grid container direction='column' justify='center' alignItems='center' spacing={2}>\r\n                <Grid item>\r\n                    <Typography variant='h3'>Tara Bingo!</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Grid container direction='column' spacing={1} justify='center' alignItems='center'>\r\n                        <Grid item>\r\n                            <TextField variant='outlined' label='Participation Code' margin=\"dense\"/>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button variant='outlined'>Join UPSCA Bingo</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Typography variant={'subtitle1'}>or</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Grid container direction='column' spacing={1} justify='center' alignItems='center'>\r\n                        <Grid item>\r\n                            <TextField variant='outlined' label='Room ID' margin=\"dense\"/>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button variant='outlined'>Join Room</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Typography variant={'subtitle1'}>or</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant='outlined' onClick={handleCreateRoom}>Create Room</Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n        </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Lobby;","C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Dashboard.js",["130"],"import React, {useState, useEffect} from 'react'\r\n\r\nimport {Grid, TextField, Button} from '@material-ui/core';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\n\r\nimport ListBox from './Dashboard/ListBox'\r\nimport Cards from './Dashboard/Cards'\r\nimport CardView from './Dashboard/CardView'\r\nimport NameDrawerView from './Dashboard/NameDrawerView'\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: 'gray',\r\n    },\r\n}))\r\n\r\nconst names_static = [\r\n    'Tiffany',\r\n    'Lucille',\r\n    'Thomas',\r\n    'Subhaan',\r\n    'Sydney',\r\n    'Lily',\r\n    'Keeley',\r\n    'Kristi',\r\n    'Izaac',\r\n    'Kayson',\r\n    'Kamile',\r\n    'Alishia',\r\n    'Etienne',\r\n    'Sahar',\r\n    'Daniyal',\r\n    'Pranav',\r\n    'Isla',\r\n    'Komal',\r\n    'Sarina',\r\n    'Aqib'\r\n]\r\n\r\nconst cards_static = [\r\n    [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]],\r\n    [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]],\r\n    [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]],\r\n    [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]\r\n]\r\n\r\nconst participant_me = 'Drix'\r\n\r\nfunction Dashboard(props) {\r\n    const classes = useStyles();\r\n\r\n    const {roomID} = props;\r\n\r\n    const [selectedCardIndex, setSelectedCardIndex] = useState('')\r\n    const [cardOwners, setCardOwners] = useState({})\r\n    const [cardProperties, setCardProperties] = useState({})\r\n    const [pickedNames, setPickedNames] = useState([])\r\n    const [names, setNames] = useState([])\r\n    const [cards, setCards] = useState([])\r\n\r\n    //temp\r\n    const [newNameVal, setNewNameVal] = useState('')\r\n\r\n    const handleSelectCard = (index) => {\r\n        setSelectedCardIndex(index)\r\n    }\r\n\r\n    const handleBack = () => {\r\n        setSelectedCardIndex('')\r\n    }\r\n\r\n    const handleUseCard = (index) => {\r\n        const cardOwners_copy = {...cardOwners}\r\n        if (!cardOwners_copy[participant_me]) {\r\n            cardOwners_copy[participant_me] = [];\r\n        };\r\n        cardOwners_copy[participant_me].push(index);\r\n        setCardOwners(cardOwners_copy);\r\n    }\r\n\r\n    const handleCancelOwnership = (cardIndex) => {\r\n        const cardOwners_copy = {...cardOwners};\r\n        const index = cardOwners_copy[participant_me].indexOf(cardIndex)\r\n        if (index < 0) {\r\n            return;\r\n        }\r\n        cardOwners_copy[participant_me].splice(index,1)\r\n        setCardOwners(cardOwners_copy);\r\n    }\r\n\r\n    const handleAddName = (e) => {\r\n        const names_copy = [...names];\r\n        e.preventDefault();\r\n        if (names_copy.includes(newNameVal)) {\r\n            return;\r\n        }\r\n        names_copy.push(newNameVal)\r\n        \r\n        setNewNameVal('')\r\n        setNames(names_copy)\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        const cardProps_temp = {};\r\n        Object.entries(cardOwners).forEach(([key,val])=>{\r\n            val.forEach(item=> {\r\n                cardProps_temp[item] = key;\r\n            })\r\n        });\r\n        setCardProperties(cardProps_temp);\r\n        //writeData();\r\n    }, [cardOwners])\r\n\r\n    useEffect(()=>{\r\n        //writeData(roomID,'gameData', {names, pickedNames})\r\n    }, [names, pickedNames])\r\n\r\n    useEffect(()=>{\r\n        const numOfCards = 4;\r\n        const cards_temp = [];\r\n        let pickedNumbers = null;\r\n        for (let i = 0; i < numOfCards; i++) {\r\n            cards_temp.push([])\r\n            pickedNumbers = [];\r\n            for (let j = 0; j < 5; j++) {\r\n                cards_temp[i].push([])\r\n                for (let k = 0; k < 5; k++) {\r\n                    let randomNum = null;\r\n                    do {\r\n                        randomNum = Math.random() * names_static.length;\r\n                        randomNum = randomNum.toFixed(0);\r\n                    } while((pickedNumbers.includes(randomNum) || names_static[randomNum] === '' || names_static[randomNum] === null || names_static[randomNum] === undefined) && pickedNumbers.length < names_static.length)\r\n                    pickedNumbers.push(randomNum)\r\n                    cards_temp[i][j].push(names_static[randomNum]);\r\n                }\r\n            }\r\n        }\r\n        setCards(cards_temp);\r\n    },[names])\r\n\r\n    return(\r\n        <Grid container direction='row' spacing={2} justify='center' className={classes.root}>\r\n            <Grid item xs={10} sm={3} md={2}>\r\n                <ListBox items={names} listName={`Room ${roomID} Participants`}/>\r\n            </Grid>\r\n            <Grid item xs={10} sm={3} md={2}>\r\n                <ListBox items={names} listName='Items List'/>\r\n            </Grid>\r\n            <Grid item xs={10} sm={3} md={2}>\r\n                <ListBox items={pickedNames} listName='Picked Items'/>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={8}>\r\n                <NameDrawerView names={names} pickedNames={pickedNames} setPickedNames={setPickedNames} />\r\n            </Grid>\r\n            {selectedCardIndex === '' ? \r\n                <Grid item xs={12} sm={6} md={8}>\r\n                    <Cards items={cards} onSelectCard={handleSelectCard} cardProperties={cardProperties}/>\r\n                </Grid>\r\n            :\r\n                <Grid item xs={12} sm={6} md={8}>\r\n                    <CardView\r\n                        items={cards[selectedCardIndex]}\r\n                        index={selectedCardIndex} \r\n                        onBack={handleBack} \r\n                        onUseCard={handleUseCard} \r\n                        onCancelOwnership={handleCancelOwnership} \r\n                        cardOwner={cardProperties[selectedCardIndex]}\r\n                        participant_me={participant_me}\r\n                    />\r\n                </Grid>\r\n            }\r\n            <Grid item><TextField label='Participant Name' margin='dense'/><Button>Set</Button></Grid>\r\n            <Grid item><form onSubmit={handleAddName}><TextField label='New Item' margin='dense' value={newNameVal} onChange={e => {setNewNameVal(e.target.value)}} /><Button onClick={handleAddName} >Set</Button></form></Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Dashboard;\r\n",["131","132"],"C:\\Users\\GabrielSlach\\Desktop\\drix\\bingo\\bingo-frontend\\src\\pages\\Classic\\CardView.js",[],{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"133","replacedBy":"137"},{"ruleId":"135","replacedBy":"138"},{"ruleId":"133","replacedBy":"139"},{"ruleId":"135","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":13,"column":7,"nodeType":"143","messageId":"144","endLine":13,"endColumn":25},{"ruleId":"141","severity":1,"message":"145","line":1,"column":10,"nodeType":"143","messageId":"144","endLine":1,"endColumn":20},{"ruleId":"133","replacedBy":"146"},{"ruleId":"135","replacedBy":"147"},{"ruleId":"141","severity":1,"message":"148","line":18,"column":17,"nodeType":"143","messageId":"144","endLine":18,"endColumn":26},{"ruleId":"141","severity":1,"message":"149","line":3,"column":61,"nodeType":"143","messageId":"144","endLine":3,"endColumn":72},{"ruleId":"141","severity":1,"message":"150","line":57,"column":13,"nodeType":"143","messageId":"144","endLine":57,"endColumn":18},{"ruleId":"151","severity":1,"message":"152","line":112,"column":8,"nodeType":"153","endLine":112,"endColumn":17,"suggestions":"154"},{"ruleId":"151","severity":1,"message":"155","line":43,"column":8,"nodeType":"153","endLine":43,"endColumn":17,"suggestions":"156"},{"ruleId":"133","replacedBy":"157"},{"ruleId":"135","replacedBy":"158"},{"ruleId":"133","replacedBy":"159"},{"ruleId":"135","replacedBy":"160"},{"ruleId":"141","severity":1,"message":"161","line":3,"column":15,"nodeType":"143","messageId":"144","endLine":3,"endColumn":19},{"ruleId":"141","severity":1,"message":"162","line":3,"column":21,"nodeType":"143","messageId":"144","endLine":3,"endColumn":29},{"ruleId":"141","severity":1,"message":"163","line":3,"column":31,"nodeType":"143","messageId":"144","endLine":3,"endColumn":43},{"ruleId":"141","severity":1,"message":"164","line":20,"column":12,"nodeType":"143","messageId":"144","endLine":20,"endColumn":21},{"ruleId":"141","severity":1,"message":"165","line":9,"column":3,"nodeType":"143","messageId":"144","endLine":9,"endColumn":7},{"ruleId":"141","severity":1,"message":"166","line":23,"column":10,"nodeType":"143","messageId":"144","endLine":23,"endColumn":14},{"ruleId":"141","severity":1,"message":"167","line":4,"column":21,"nodeType":"143","messageId":"144","endLine":4,"endColumn":31},{"ruleId":"151","severity":1,"message":"168","line":44,"column":8,"nodeType":"153","endLine":44,"endColumn":17,"suggestions":"169"},{"ruleId":"151","severity":1,"message":"170","line":52,"column":8,"nodeType":"153","endLine":52,"endColumn":10,"suggestions":"171"},{"ruleId":"141","severity":1,"message":"172","line":18,"column":12,"nodeType":"143","messageId":"144","endLine":18,"endColumn":21},{"ruleId":"141","severity":1,"message":"173","line":41,"column":7,"nodeType":"143","messageId":"144","endLine":41,"endColumn":19},{"ruleId":"133","replacedBy":"174"},{"ruleId":"135","replacedBy":"175"},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],["176"],["177"],["176"],["177"],"no-unused-vars","'WEB_SERVER_API_URL' is assigned a value but never used.","Identifier","unusedVar","'useContext' is defined but never used.",["176"],["177"],"'setCookie' is assigned a value but never used.","'DialogTitle' is defined but never used.","'cards' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'roomId' and 'setClassicGameAdmin'. Either include them or remove the dependency array.","ArrayExpression",["178"],"React Hook useEffect has missing dependencies: 'match.path', 'playerId', 'roomId', and 'setClassicGameAdmin'. Either include them or remove the dependency array.",["179"],["176"],["177"],["176"],["177"],"'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ariaLabel' is assigned a value but never used.","'Link' is defined but never used.","'Home' is defined but never used.","'withStyles' is defined but never used.","React Hook useEffect has a missing dependency: 'match.path'. Either include it or remove the dependency array.",["180"],"React Hook useEffect has missing dependencies: 'match.path' and 'roomId'. Either include them or remove the dependency array.",["181"],"'setRoomID' is assigned a value but never used.","'cards_static' is assigned a value but never used.",["176"],["177"],"no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [cookies, roomId, setClassicGameAdmin]",{"range":"190","text":"191"},"Update the dependencies array to be: [cookies, match.path, playerId, roomId, setClassicGameAdmin]",{"range":"192","text":"193"},"Update the dependencies array to be: [cookies, match.path]",{"range":"194","text":"195"},"Update the dependencies array to be: [match.path, roomId]",{"range":"196","text":"197"},[3300,3309],"[cookies, roomId, setClassicGameAdmin]",[1163,1172],"[cookies, match.path, playerId, roomId, setClassicGameAdmin]",[1297,1306],"[cookies, match.path]",[1542,1544],"[match.path, roomId]"]