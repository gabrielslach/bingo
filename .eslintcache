[{"D:\\Desktop\\bingo\\bingo-frontend\\src\\App.js":"1","D:\\Desktop\\bingo\\bingo-frontend\\src\\index.js":"2","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard.js":"3","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Lobby.js":"4","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\DeckView.js":"5","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\CardView.js":"6","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\Cards.js":"7","D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\useClassicGameAdmin.js":"8","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\Card.js":"9","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\ListBox.js":"10","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin.js":"11","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\GameDrawer.js":"12","D:\\Desktop\\bingo\\bingo-frontend\\src\\reportWebVitals.js":"13","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\Card.js":"14","D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\useGameDrawer.js":"15","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\NameDrawerView.js":"16","D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\utilityFunctions.js":"17","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\CreateRoom.js":"18","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\PlayerDeckView.js":"19","D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\usePlayerLogin.js":"20","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\CardView.js":"21","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\DeckViewLogin.js":"22","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\AddCardDialog.js":"23","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\DeleteCardDialog.js":"24","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\DialogScaffold.js":"25","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\DeletePlayerDialog.js":"26"},{"size":2308,"mtime":1616990391331,"results":"27","hashOfConfig":"28"},{"size":517,"mtime":1616811055374,"results":"29","hashOfConfig":"28"},{"size":6073,"mtime":1616836734616,"results":"30","hashOfConfig":"28"},{"size":3004,"mtime":1616994141809,"results":"31","hashOfConfig":"28"},{"size":1875,"mtime":1616850560419,"results":"32","hashOfConfig":"28"},{"size":2624,"mtime":1617003189211,"results":"33","hashOfConfig":"28"},{"size":922,"mtime":1616811055376,"results":"34","hashOfConfig":"28"},{"size":4952,"mtime":1617065242133,"results":"35","hashOfConfig":"28"},{"size":1546,"mtime":1616811055375,"results":"36","hashOfConfig":"28"},{"size":1132,"mtime":1616811055376,"results":"37","hashOfConfig":"28"},{"size":11633,"mtime":1617093443533,"results":"38","hashOfConfig":"28"},{"size":4905,"mtime":1616857832857,"results":"39","hashOfConfig":"28"},{"size":375,"mtime":1616811055377,"results":"40","hashOfConfig":"28"},{"size":1556,"mtime":1616814956213,"results":"41","hashOfConfig":"28"},{"size":4256,"mtime":1617083456642,"results":"42","hashOfConfig":"28"},{"size":1661,"mtime":1616811055376,"results":"43","hashOfConfig":"28"},{"size":660,"mtime":1616991025153,"results":"44","hashOfConfig":"28"},{"size":1849,"mtime":1616814956214,"results":"45","hashOfConfig":"28"},{"size":4785,"mtime":1617091333595,"results":"46","hashOfConfig":"28"},{"size":3745,"mtime":1617001127063,"results":"47","hashOfConfig":"28"},{"size":2845,"mtime":1616811055376,"results":"48","hashOfConfig":"28"},{"size":3094,"mtime":1616814956214,"results":"49","hashOfConfig":"28"},{"size":2142,"mtime":1617093545475,"results":"50","hashOfConfig":"28"},{"size":2096,"mtime":1617093560281,"results":"51","hashOfConfig":"28"},{"size":1359,"mtime":1617091916252,"results":"52","hashOfConfig":"28"},{"size":764,"mtime":1617093373059,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},"j62p19",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"57"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"75"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"75"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Desktop\\bingo\\bingo-frontend\\src\\App.js",["119","120"],"import './App.css';\r\n\r\nimport React, {useState} from 'react'\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams,\r\n  Redirect\r\n} from \"react-router-dom\";\r\n\r\nimport { CookiesProvider } from 'react-cookie';\r\n\r\nimport Dashboard from './pages/Dashboard'\r\nimport CreateRoom from './pages/CreateRoom'\r\nimport Lobby from './pages/Lobby'\r\nimport ClassicAdmin from './pages/Classic/Admin'\r\nimport ClassicDeckView from './pages/Classic/DeckView'\r\nimport ClassicDeckViewLogin from './pages/Classic/DeckViewLogin'\r\nimport ClassicGameDrawer from './pages/Classic/GameDrawer'\r\n\r\nfunction Home() {\r\n  const [roomID, setRoomID] = useState(null) //create custom hook once grew\r\n  return (\r\n    <>\r\n      {roomID === null && <CreateRoom setRoomID={setRoomID}/>}\r\n      {roomID !== null && <Dashboard roomID={roomID}/>}\r\n      </>\r\n  );\r\n}\r\n\r\nfunction AdminRouter(props) {\r\n  const {roomId} = props;\r\n  const match = useRouteMatch();\r\n  return (\r\n    <Switch>\r\n    <Route path={`${match.path}/game-drawer`}>\r\n      <ClassicGameDrawer roomId={roomId} />\r\n    </Route>\r\n    <Route path={`${match.path}/`}>\r\n      <ClassicAdmin roomId={roomId} />\r\n    </Route>\r\n    </Switch>\r\n  )\r\n}\r\n\r\nfunction GameRoom() {\r\n  const {roomId} = useParams();\r\n  const match = useRouteMatch();\r\n  return (\r\n  <Switch>\r\n    <Route path={`${match.path}/admin`}>\r\n      <AdminRouter roomId={roomId}/>\r\n    </Route>\r\n    <Route path={`${match.path}/:playerId`}>\r\n      <ClassicDeckView roomId={roomId} />\r\n    </Route>\r\n    <Route path={`${match.path}/`}>\r\n      <ClassicDeckViewLogin roomId={roomId} />\r\n    </Route>\r\n  </Switch>);\r\n}\r\n\r\nfunction ClassicBingo() {\r\n  const match = useRouteMatch();\r\n  return(\r\n    <Switch>\r\n      <Route path={`${match.path}/:roomId`}>\r\n        <GameRoom/>\r\n      </Route>\r\n      <Route path={`${match.path}/`}>\r\n        <Lobby/>\r\n      </Route>\r\n    </Switch>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <CookiesProvider>\r\n      <Router>\r\n        <Switch>\r\n          <Route path='/classic'>\r\n            <ClassicBingo/>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Redirect to={{pathname:'/classic/UPSCA'}}/>\r\n            {/* <Home/> */}\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </CookiesProvider>\r\n  )\r\n}\r\n\r\nexport default App;\r\n",["121","122"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\index.js",[],["123","124"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard.js",["125"],"import React, {useState, useEffect} from 'react'\r\n\r\nimport {Grid, TextField, Button} from '@material-ui/core';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\n\r\nimport ListBox from './Dashboard/ListBox'\r\nimport Cards from './Dashboard/Cards'\r\nimport CardView from './Dashboard/CardView'\r\nimport NameDrawerView from './Dashboard/NameDrawerView'\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: 'gray',\r\n    },\r\n}))\r\n\r\nconst names_static = [\r\n    'Tiffany',\r\n    'Lucille',\r\n    'Thomas',\r\n    'Subhaan',\r\n    'Sydney',\r\n    'Lily',\r\n    'Keeley',\r\n    'Kristi',\r\n    'Izaac',\r\n    'Kayson',\r\n    'Kamile',\r\n    'Alishia',\r\n    'Etienne',\r\n    'Sahar',\r\n    'Daniyal',\r\n    'Pranav',\r\n    'Isla',\r\n    'Komal',\r\n    'Sarina',\r\n    'Aqib'\r\n]\r\n\r\nconst cards_static = [\r\n    [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]],\r\n    [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]],\r\n    [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]],\r\n    [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]\r\n]\r\n\r\nconst participant_me = 'Drix'\r\n\r\nfunction Dashboard(props) {\r\n    const classes = useStyles();\r\n\r\n    const {roomID} = props;\r\n\r\n    const [selectedCardIndex, setSelectedCardIndex] = useState('')\r\n    const [cardOwners, setCardOwners] = useState({})\r\n    const [cardProperties, setCardProperties] = useState({})\r\n    const [pickedNames, setPickedNames] = useState([])\r\n    const [names, setNames] = useState([])\r\n    const [cards, setCards] = useState([])\r\n\r\n    //temp\r\n    const [newNameVal, setNewNameVal] = useState('')\r\n\r\n    const handleSelectCard = (index) => {\r\n        setSelectedCardIndex(index)\r\n    }\r\n\r\n    const handleBack = () => {\r\n        setSelectedCardIndex('')\r\n    }\r\n\r\n    const handleUseCard = (index) => {\r\n        const cardOwners_copy = {...cardOwners}\r\n        if (!cardOwners_copy[participant_me]) {\r\n            cardOwners_copy[participant_me] = [];\r\n        };\r\n        cardOwners_copy[participant_me].push(index);\r\n        setCardOwners(cardOwners_copy);\r\n    }\r\n\r\n    const handleCancelOwnership = (cardIndex) => {\r\n        const cardOwners_copy = {...cardOwners};\r\n        const index = cardOwners_copy[participant_me].indexOf(cardIndex)\r\n        if (index < 0) {\r\n            return;\r\n        }\r\n        cardOwners_copy[participant_me].splice(index,1)\r\n        setCardOwners(cardOwners_copy);\r\n    }\r\n\r\n    const handleAddName = (e) => {\r\n        const names_copy = [...names];\r\n        e.preventDefault();\r\n        if (names_copy.includes(newNameVal)) {\r\n            return;\r\n        }\r\n        names_copy.push(newNameVal)\r\n        \r\n        setNewNameVal('')\r\n        setNames(names_copy)\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        const cardProps_temp = {};\r\n        Object.entries(cardOwners).forEach(([key,val])=>{\r\n            val.forEach(item=> {\r\n                cardProps_temp[item] = key;\r\n            })\r\n        });\r\n        setCardProperties(cardProps_temp);\r\n        //writeData();\r\n    }, [cardOwners])\r\n\r\n    useEffect(()=>{\r\n        //writeData(roomID,'gameData', {names, pickedNames})\r\n    }, [names, pickedNames])\r\n\r\n    useEffect(()=>{\r\n        const numOfCards = 4;\r\n        const cards_temp = [];\r\n        let pickedNumbers = null;\r\n        for (let i = 0; i < numOfCards; i++) {\r\n            cards_temp.push([])\r\n            pickedNumbers = [];\r\n            for (let j = 0; j < 5; j++) {\r\n                cards_temp[i].push([])\r\n                for (let k = 0; k < 5; k++) {\r\n                    let randomNum = null;\r\n                    do {\r\n                        randomNum = Math.random() * names_static.length;\r\n                        randomNum = randomNum.toFixed(0);\r\n                    } while((pickedNumbers.includes(randomNum) || names_static[randomNum] === '' || names_static[randomNum] === null || names_static[randomNum] === undefined) && pickedNumbers.length < names_static.length)\r\n                    pickedNumbers.push(randomNum)\r\n                    cards_temp[i][j].push(names_static[randomNum]);\r\n                }\r\n            }\r\n        }\r\n        setCards(cards_temp);\r\n    },[names])\r\n\r\n    return(\r\n        <Grid container direction='row' spacing={2} justify='center' className={classes.root}>\r\n            <Grid item xs={10} sm={3} md={2}>\r\n                <ListBox items={names} listName={`Room ${roomID} Participants`}/>\r\n            </Grid>\r\n            <Grid item xs={10} sm={3} md={2}>\r\n                <ListBox items={names} listName='Items List'/>\r\n            </Grid>\r\n            <Grid item xs={10} sm={3} md={2}>\r\n                <ListBox items={pickedNames} listName='Picked Items'/>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={8}>\r\n                <NameDrawerView names={names} pickedNames={pickedNames} setPickedNames={setPickedNames} />\r\n            </Grid>\r\n            {selectedCardIndex === '' ? \r\n                <Grid item xs={12} sm={6} md={8}>\r\n                    <Cards items={cards} onSelectCard={handleSelectCard} cardProperties={cardProperties}/>\r\n                </Grid>\r\n            :\r\n                <Grid item xs={12} sm={6} md={8}>\r\n                    <CardView\r\n                        items={cards[selectedCardIndex]}\r\n                        index={selectedCardIndex} \r\n                        onBack={handleBack} \r\n                        onUseCard={handleUseCard} \r\n                        onCancelOwnership={handleCancelOwnership} \r\n                        cardOwner={cardProperties[selectedCardIndex]}\r\n                        participant_me={participant_me}\r\n                    />\r\n                </Grid>\r\n            }\r\n            <Grid item><TextField label='Participant Name' margin='dense'/><Button>Set</Button></Grid>\r\n            <Grid item><form onSubmit={handleAddName}><TextField label='New Item' margin='dense' value={newNameVal} onChange={e => {setNewNameVal(e.target.value)}} /><Button onClick={handleAddName} >Set</Button></form></Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Dashboard;\r\n",["126","127"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Lobby.js",["128"],"import React from 'react'\r\n\r\nimport {useRouteMatch} from 'react-router-dom';\r\n\r\nimport {Paper, Typography, TextField, Grid, Button} from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        padding: theme.spacing(1),\r\n        height: '100%'\r\n    },\r\n    paperRoot: {\r\n        padding: theme.spacing(2)\r\n    }\r\n    \r\n}))\r\n\r\nfunction Lobby(props) {\r\n    const {setRoomID} = props;\r\n    const classes = useStyles();\r\n    const match = useRouteMatch();\r\n\r\n    const handleCreateRoom = () => {\r\n        //const roomID = createRoom();\r\n        //setRoomID(roomID);\r\n    }\r\n\r\n    const handleGoToUPSCARoom = () => {\r\n        const lobbyUrl = match.path\r\n        const upscaRoomUrl = lobbyUrl + 'UPSCA';\r\n        window.location.assign(upscaRoomUrl);\r\n    }\r\n\r\n    const handleGoToRoom = (e) => {\r\n        e.preventDefault();\r\n        const lobbyUrl = match.path\r\n        const roomUrl = lobbyUrl + e.target.roomId.value;\r\n        e.target.reset();\r\n        window.location.assign(roomUrl);\r\n    }\r\n\r\n    return(\r\n        <Grid container direction='row' justify='center' alignItems='center' className={classes.root}>\r\n            <Grid item md={6} sm={10} xs={12}>\r\n        <Paper classes={{root: classes.paperRoot}}>\r\n            <Grid container direction='column' justify='center' alignItems='center' spacing={2}>\r\n                <Grid item>\r\n                    <Typography variant='h3'>Bingo!</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Grid container direction='column' spacing={1} justify='center' alignItems='center'>\r\n                        <Grid item>\r\n                            <Button variant='outlined' onClick={handleGoToUPSCARoom}>Join UPSCA Bingo</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Typography variant={'subtitle1'}>or</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <form onSubmit={handleGoToRoom}>\r\n                    <Grid container direction='column' spacing={1} justify='center' alignItems='center'>\r\n                        <Grid item>\r\n                            <TextField variant='outlined' label='Room ID' margin=\"dense\" name='roomId'/>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button variant='outlined' type='submit'>Join Room</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    </form>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Typography variant={'subtitle1'}>or</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant='outlined' onClick={handleCreateRoom}>Create Room</Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n        </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Lobby;","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\DeckView.js",["129","130"],"import React, {useEffect} from 'react';\r\nimport {\r\n    useParams,\r\n    useRouteMatch\r\n  } from \"react-router-dom\";\r\n\r\n  \r\nimport {Grid, Typography} from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CardView from './CardView'\r\n\r\nimport useClassicGameAdmin from '../../util/useClassicGameAdmin';\r\nimport usePlayerLogin from '../../util/usePlayerLogin';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        marginTop: theme.spacing(2)\r\n    },\r\n    headers: {\r\n        marginLeft: theme.spacing(1)\r\n    }\r\n}));\r\n\r\nfunction DeckView(props) {\r\n    const {roomId} = props;\r\n    const match = useRouteMatch();\r\n\r\n    const classes = useStyles();\r\n\r\n    const {playerId} = useParams();\r\n    \r\n    const [cards = [], players = [], isLoading, setClassicGameAdmin ] = useClassicGameAdmin();\r\n    const [cookies] = usePlayerLogin();\r\n\r\n    useEffect(()=> {\r\n        if (cookies.loginToken) {\r\n            setClassicGameAdmin('get-player', {playerId, roomId});\r\n        } else {\r\n            const rootPath = match.path.split('/:roomId/:playerId')[0]\r\n            window.location.assign(`${rootPath}/${roomId}`)\r\n        };\r\n    }, [cookies]);\r\n    \r\n    return (\r\n        <Grid container direction='row' alignItems = 'center' spacing={2} className={classes.root}>\r\n            <Grid item className={classes.headers}>\r\n                <Typography variant='h6'><b>Welcome {players.name}!</b></Typography>\r\n                <Typography variant='subtitle2'>Player ID: {players.id}</Typography>\r\n            </Grid>\r\n            {cards.map(item => (\r\n                <Grid item key={`${playerId}-card-${item.id}`} lg={3} md={4} sm={6} xs={12}>\r\n                    <CardView items={item.cells} cardId={`${roomId}-${item.id}`}/>\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n        \r\n    )\r\n  }\r\n\r\n  export default DeckView;","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\CardView.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\Cards.js",[],["131","132"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\useClassicGameAdmin.js",["133"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\Card.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\ListBox.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin.js",["134","135","136"],"import React, {useEffect, useState} from 'react';\r\n\r\nimport {\r\n    Grid, \r\n    TextField, \r\n    Button, \r\n    Paper, \r\n    Typography, \r\n    Dialog, \r\n    DialogContent, \r\n    DialogActions,\r\n    Backdrop,\r\n    CircularProgress\r\n} from '@material-ui/core';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles'\r\n\r\nimport {useRouteMatch} from 'react-router-dom';\r\n\r\nimport useClassicGameAdmin from '../../util/useClassicGameAdmin';\r\nimport usePlayerLogin from '../../util/usePlayerLogin';\r\nimport PlayerDeckView from './Admin/PlayerDeckView';\r\nimport CardView from './CardView';\r\nimport DeleteCardDialog from './Admin/DeleteCardDialog';\r\nimport DeletePlayerDialog from './Admin/DeletePlayerDialog';\r\nimport AddCardDialog from './Admin/AddCardDialog';\r\n\r\nimport useGameDrawer from '../../util/useGameDrawer';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        padding: theme.spacing(1),\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    paperRoot: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center'\r\n    },\r\n    deckViewGrid: {\r\n        minWidth: '66.7%'\r\n    }, \r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nconst CssTextField = withStyles({\r\n    root: {\r\n      \r\n      '& label.Mui-focused': {\r\n        color: 'rgba(255,248,6,0.8)',\r\n      },\r\n      '& label': {\r\n        color: 'rgba(255,255,255,0.8)',\r\n      },\r\n      '&:hover label': {\r\n        color: 'rgba(255,248,6,0.8)',\r\n      },\r\n      '& .MuiOutlinedInput-root': {\r\n        color: 'rgba(255,255,255,0.8)',\r\n        '& fieldset': {\r\n          borderColor: 'rgba(255,255,255,0.4)',\r\n        },\r\n        '&:hover fieldset': {\r\n          borderColor: 'rgba(255,248,6,0.4)',\r\n        },\r\n        '&.Mui-focused fieldset': {\r\n          borderColor: 'rgba(255,248,6,0.8)',\r\n        },\r\n      },\r\n    },\r\n  })(TextField);\r\n\r\nfunction ClassicAdmin(props) {\r\n    const {roomId} = props;\r\n    const classes = useStyles();\r\n    const match = useRouteMatch();\r\n\r\n    const [cookies, setPlayerLogin] = usePlayerLogin();\r\n    const  [cards = [], players = [], isLoading, setClassicGameAdmin] = useClassicGameAdmin();\r\n    const [pickedCells, setPickedCells] = useGameDrawer();\r\n    const [filteredList, setFilteredList] = useState([])\r\n    const [selectedCard, setSelectedCard] = useState({});\r\n    const [openCardDialog, setOpenCardDialog] = useState(false);\r\n    const [enableRefresh, setEnableRefresh] = useState(0); //refresh countdown timer\r\n    const [selectedPlayerInfo, setSelectedPlayerInfo] = useState({});\r\n    const [confirmDialogControl, setConfirmDialogControl] = useState({\r\n        deleteCard: false,\r\n        deletePlayer: false,\r\n        addCard: false\r\n    });\r\n\r\n    const handleCreatePlayer = e => {\r\n        e.preventDefault();\r\n        const {name, email, noOfCards} = e.target;\r\n        if (name.value.length < 1 || parseInt(noOfCards.value) < 1) {\r\n            alert('Incomplete player details!');\r\n            return;\r\n        }\r\n        setClassicGameAdmin('register-player', {\r\n            name: name.value,\r\n            email: email.value,\r\n            noOfCards: noOfCards.value,\r\n            roomId\r\n        });\r\n    };\r\n\r\n    const handleAdminLogin = e => {\r\n        e.preventDefault();\r\n        const password = e.target.password.value;\r\n        setPlayerLogin('login', {roomId, password});\r\n    };\r\n\r\n    const filterFx = searchTxt => item => {\r\n        const {id, name, email} = item.player;\r\n\r\n        const itemToString = `${id} ${name} ${email}`;\r\n\r\n        return (itemToString.toUpperCase().indexOf(searchTxt.toUpperCase()) >= 0);\r\n    }\r\n\r\n    const handleSearch = e => {\r\n        e.preventDefault();\r\n        const searchText = e.target.searchText.value;\r\n        if (searchText.length > 0) {\r\n          const filtered = players.filter(filterFx(searchText));\r\n          setFilteredList(filtered);\r\n        } else {\r\n            setFilteredList(players);\r\n        }\r\n    };\r\n\r\n    const handleSelectCard = (card) => {\r\n        setPickedCells('get-picked-cells', {roomId});\r\n        setSelectedCard(card);\r\n        setOpenCardDialog(true);\r\n    };\r\n\r\n    const handleCloseCardDialog = () => {\r\n        setOpenCardDialog(false);\r\n        setSelectedCard({});\r\n    };\r\n\r\n    const handleGoToGameDrawer = () => {\r\n        let gameDrawerUrl = match.url\r\n\r\n        if (gameDrawerUrl[gameDrawerUrl.length - 1] === '/' ||\r\n          gameDrawerUrl[gameDrawerUrl.length - 1] === '\\\\') {\r\n            gameDrawerUrl += 'game-drawer';\r\n          } else {\r\n            gameDrawerUrl += '/game-drawer';\r\n          }\r\n        window.open(gameDrawerUrl);\r\n    };\r\n\r\n    const handleClickRefresh = () => {\r\n        let refreshTime = 10;\r\n        setEnableRefresh(refreshTime);\r\n        const intervalRef = setInterval(() => {\r\n            refreshTime--;\r\n            setEnableRefresh(refreshTime);\r\n        }, 1000);\r\n        \r\n        setTimeout(() => {\r\n            clearInterval(intervalRef);\r\n        }, 10000);\r\n        setPickedCells('reset-picked-cells-cache');\r\n        setPickedCells('get-picked-cells', {roomId});\r\n    };\r\n\r\n    const handleToggleConfirmDlg = (key) => (id, name) => {\r\n        const confirmDialogControl_ = {...confirmDialogControl};\r\n        confirmDialogControl_[key] = !confirmDialogControl_[key];\r\n        setConfirmDialogControl(confirmDialogControl_);\r\n        if (id) {\r\n            setSelectedPlayerInfo({\r\n                id, \r\n                name\r\n            });\r\n        };\r\n    };\r\n\r\n    const handleAddCardConfirm = (playerId, noOfCards) => {\r\n        setClassicGameAdmin('add-card', {roomId, playerId, noOfCards});\r\n    };\r\n\r\n    const handleDeleteCardConfirm = (playerId, cardId) => {\r\n        setClassicGameAdmin('delete-card', {roomId, playerId, cardId});\r\n    };\r\n\r\n    const handleDeletePlayerConfirm = (playerId) => {\r\n        setClassicGameAdmin('delete-player', {roomId, playerId});\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (cookies.loginToken) {\r\n        setClassicGameAdmin(\"get-player-all\", { roomId });\r\n      }\r\n    }, [cookies]);\r\n    \r\n    useEffect(() => {\r\n        setFilteredList(players);\r\n      }, [players]);\r\n\r\n      useEffect(()=> {\r\n        document.title = 'BINGO! Admin';\r\n        if (cookies.userInfo && cookies.userInfo.userId === 'admin'){\r\n            setPickedCells('get-picked-cells', {roomId});\r\n        };\r\n      }, [])\r\n\r\n    return (\r\n        <Grid container direction='column' justify='center' alignItems='center' spacing={2} className={classes.root}>\r\n        <Grid item md={6} sm={10} xs={12}>\r\n    <Paper classes={{root: classes.paperRoot}}>\r\n        <Grid container direction='column' justify='center' alignItems='center' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h3'>Room {roomId} Game Master</Typography>\r\n            </Grid>\r\n            {!cookies.loginToken ? \r\n                <Grid item>\r\n                    <form onSubmit={handleAdminLogin}>\r\n                    <Grid container direction='row' spacing={1} justify='center' alignItems='center'>\r\n                        <Grid item md={6} sm={12}>\r\n                            <TextField variant='outlined' label='Password' name='password' type='password' margin=\"dense\" fullWidth/>\r\n                        </Grid>\r\n                        <Grid item md={2} sm={12}>\r\n                            <Button variant='contained' type='submit' fullWidth>Login</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    </form>\r\n                </Grid>\r\n            :\r\n            <React.Fragment>\r\n                <Grid item>\r\n                    <form onSubmit={handleCreatePlayer}>\r\n                    <Grid container direction='row' spacing={1} justify='center' alignItems='center'>\r\n                        <Grid item md={3} sm={12}>\r\n                            <TextField variant='outlined' label='Name' name='name' margin=\"dense\" fullWidth/>\r\n                        </Grid>\r\n                        <Grid item md={4} sm={12}>\r\n                            <TextField variant='outlined' label='Email' name='email' margin=\"dense\" fullWidth/>\r\n                        </Grid>\r\n                        <Grid item md={3} sm={12}>\r\n                            <TextField variant='outlined' label='No of Cards' name='noOfCards' margin=\"dense\" fullWidth/>\r\n                        </Grid>\r\n                        <Grid item md={2} sm={12}>\r\n                            <Button variant='contained' type='submit' fullWidth>Create Player</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    </form>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant='contained' onClick={handleGoToGameDrawer} >Game Draw</Button>\r\n                </Grid>\r\n            </React.Fragment>\r\n            }\r\n        </Grid>\r\n    </Paper>\r\n    </Grid>\r\n    <Grid item xs={12}>\r\n        <form onSubmit={handleSearch}>\r\n            <Grid container direction='row' spacing={1} alignItems='center'> \r\n                <Grid item>\r\n                    <CssTextField\r\n                        label=\"Search Player\"\r\n                        variant=\"outlined\"\r\n                        size='small'\r\n                        id=\"custom-css-outlined-input\"\r\n                        name='searchText'\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button type='submit' variant='contained' fullWidth>Search</Button>\r\n                </Grid>\r\n            </Grid>  \r\n        </form>\r\n    </Grid>\r\n    {filteredList.map(item => (\r\n        <Grid item  md={8} sm={12} xs={12} key={`${item.player.id}-deck-view`} className={classes.deckViewGrid} >\r\n            <PlayerDeckView \r\n                items={item.cards} \r\n                playerInfo={item.player} \r\n                onSelectCard={handleSelectCard}\r\n                onDeleteCard={handleToggleConfirmDlg('deleteCard')}\r\n                onDeletePlayer={handleToggleConfirmDlg('deletePlayer')}\r\n                onAddCard={handleToggleConfirmDlg('addCard')}\r\n                />\r\n        </Grid>\r\n    ))}\r\n    <Dialog open={openCardDialog} onClose={handleCloseCardDialog}>\r\n        <DialogContent>\r\n            <CardView items={selectedCard.cells} cardId={selectedCard.id} pickedCells={pickedCells} />\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button onClick={handleCloseCardDialog}>Close</Button>\r\n            <Button variant='contained' onClick={handleClickRefresh} disabled={enableRefresh > 0}>Refresh {enableRefresh > 0 && `(${enableRefresh})`}</Button>\r\n        </DialogActions>\r\n    </Dialog>\r\n    <DeletePlayerDialog \r\n        open={confirmDialogControl.deletePlayer} \r\n        setOpen={handleToggleConfirmDlg('deletePlayer')}\r\n        onConfirm={handleDeletePlayerConfirm}\r\n        playerId={selectedPlayerInfo.id}\r\n        playerName={selectedPlayerInfo.name}\r\n        />\r\n    <DeleteCardDialog \r\n        open={confirmDialogControl.deleteCard} \r\n        setOpen={handleToggleConfirmDlg('deleteCard')}\r\n        onConfirm={handleDeleteCardConfirm}\r\n        playerId={selectedPlayerInfo.id}\r\n        playerName={selectedPlayerInfo.name}\r\n        />\r\n    <AddCardDialog \r\n        open={confirmDialogControl.addCard} \r\n        setOpen={handleToggleConfirmDlg('addCard')}\r\n        onConfirm={handleAddCardConfirm}\r\n        playerId={selectedPlayerInfo.id}\r\n        playerName={selectedPlayerInfo.name}\r\n        />\r\n    <Backdrop className={classes.backdrop} open={isLoading}>\r\n        <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n    </Grid>\r\n    )\r\n  }\r\n\r\n  export default ClassicAdmin;","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\GameDrawer.js",["137","138","139","140","141","142","143","144"],"import React, {useEffect, useState} from 'react';\r\n\r\nimport {Grid, Button, Typography, Paper} from '@material-ui/core';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nimport useGameDrawer from '../../util/useGameDrawer';\r\n\r\nconst bingo = {\r\n    B: [1,15],\r\n    I: [16, 30],\r\n    N: [31,45],\r\n    G: [46,60],\r\n    O: [61,75],\r\n}\r\n\r\nconst useStyles = makeStyles(theme=> ({\r\n    gridRoot: {\r\n        minHeight: '105%'\r\n    },\r\n    roundPaper: {\r\n        width: '80px',\r\n        height: '80px',\r\n        borderRadius: '100%',\r\n    },\r\n    centeredTypography: {\r\n        textAlign: 'center',\r\n        paddingTop: '25px'\r\n    },\r\n    h1Typography: {\r\n        fontSize: '15em',\r\n        color: 'white',\r\n        textShadow: '2px 2px 4px #000000'\r\n    },\r\n    h5Typography: {\r\n        color: 'white',\r\n        textShadow: '2px 2px 4px #000000',\r\n        paddingTop: theme.spacing(3)\r\n    }\r\n}));\r\n\r\nconst GameDrawer = props => {\r\n    const {roomId} = props;\r\n    const classes = useStyles();\r\n\r\n    const [pickedCells, setPickedCells] = useGameDrawer();\r\n    const [letter, setLetter] = useState('');\r\n    const [number, setNumber] = useState(0);\r\n    const [intervalId, setIntervalId] = useState(NaN);\r\n    const [isWaiting, setIsWaiting] = useState(false);\r\n    const [pickedCellsForDisplay, setPickedCellsForDisplay] = useState([]);\r\n\r\n    const getLetter = number_ => {\r\n        switch (true) {\r\n            case (number_ < 16):\r\n                return('B')\r\n                break;\r\n            case (number_ < 31):\r\n                return('I')\r\n                break;\r\n            case (number_ < 46):\r\n                return('N')\r\n                break;\r\n            case (number_ < 61):\r\n                return('G')\r\n                break;\r\n            case (number_ <= 75):\r\n                return('O')\r\n                break;\r\n            default:\r\n                break;\r\n        };\r\n    };\r\n\r\n    const handleDrawNumber = () => {\r\n        setPickedCells('pick-cell', {roomId});\r\n        const rangeStart = 1;\r\n        const rangeEnd = 75;\r\n\r\n        setIsWaiting(true);\r\n        const intervalId_ = setInterval(() => {\r\n            const randomFloat = Math.random();\r\n            setNumber(Math.floor(randomFloat * (rangeEnd - rangeStart)) + rangeStart);\r\n        }, 50);\r\n        setIntervalId(intervalId_);\r\n    };\r\n\r\n    useEffect(()=> {\r\n        if (!isNaN(intervalId)) {\r\n            setTimeout(() => {\r\n                clearInterval(intervalId);\r\n                setNumber(pickedCells[pickedCells.length - 1]);\r\n                setIsWaiting(false);\r\n\r\n                const pickedCells_ = [...pickedCells];\r\n                pickedCells_.reverse();\r\n                setPickedCellsForDisplay(pickedCells_);\r\n            }, 2000);\r\n        } else {\r\n            const pickedCells_ = [...pickedCells];\r\n            pickedCells_.reverse();\r\n            setPickedCellsForDisplay(pickedCells_);\r\n        }\r\n    }, [pickedCells]);\r\n\r\n    useEffect(()=>{\r\n        if (number > 0) {\r\n            const letter_ = getLetter(number);\r\n            setLetter(letter_);\r\n        }\r\n    }, [number]);\r\n    \r\n    useEffect(()=> {\r\n        setPickedCells('get-picked-cells', {roomId});\r\n        document.title = 'BINGO! Picker';\r\n    }, []);\r\n\r\n    return(\r\n        <Grid container direction='column' alignItems='center' spacing={4} className={classes.gridRoot}>\r\n            <Grid item>\r\n                <Typography variant='h5' className={classes.h5Typography}>\r\n                    Classic Bingo - Room {roomId}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant='h1' className={classes.h1Typography}>\r\n                    {letter} {number > 0 && number}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Button \r\n                    variant='outlined' \r\n                    onClick={handleDrawNumber} \r\n                    disabled={isWaiting || pickedCells.length === 75} \r\n                    >\r\n                    {pickedCells.length === 75 ? 'All numbers picked.' : 'Draw Number'}</Button>\r\n            </Grid>\r\n            <Grid item>\r\n                <Grid container direction='row' spacing={2} justify='flex-start'>\r\n                    {pickedCellsForDisplay.map(item=> {\r\n                        const letter_ = getLetter(item);\r\n                        return (\r\n                            <Grid item key={`${item}-ball-grid`}>\r\n                                <Paper elevation={3} className={classes.roundPaper}>\r\n                                    <Typography variant='h5' className={classes.centeredTypography}>{letter_} {item}</Typography>\r\n                                </Paper>\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GameDrawer;","D:\\Desktop\\bingo\\bingo-frontend\\src\\reportWebVitals.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\Card.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\useGameDrawer.js",["145","146"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\NameDrawerView.js",["147","148","149","150"],"import React, {useState} from 'react'\r\n\r\nimport {Grid, List, ListItem, ListItemText, Typography, Button} from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        minHeight: '100%'\r\n    },\r\n    list: {\r\n        maxHeight: '100%'\r\n    }\r\n}))\r\n\r\nconst filterFunc = (pickedNames) => (val) => {\r\n    return (!pickedNames.includes(val))\r\n}\r\n\r\nfunction NameDrawerView(props) {\r\n    const {ariaLabel = 'picked list', names = [], pickedNames = [], setPickedNames} = props;\r\n    const [disabled, setDisabled] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const [pickedName, setPickedName] = useState('')\r\n\r\n    const draw = () => {\r\n        const pickedNames_copy = [...pickedNames]\r\n        const pool = names.filter(filterFunc(pickedNames))\r\n        const random_index = Math.floor(Math.random() * pool.length)\r\n\r\n        console.log(pool[random_index])\r\n        if (random_index >= pool.length) {\r\n            setDisabled(true)\r\n            return;\r\n        }\r\n\r\n        pickedNames_copy.unshift(pool[random_index])\r\n\r\n        setPickedName(pool[random_index])\r\n        setPickedNames(pickedNames_copy)\r\n    }\r\n\r\n    return(\r\n        <Grid container direction='column' justify='flex-start' className={classes.root}>\r\n            <Grid item>\r\n                <Typography variant='h4'>{pickedName || 'BINGO Picker'}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Button variant='contained' disabled={disabled} onClick={()=>draw()} >Draw a Name</Button>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default NameDrawerView;","D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\utilityFunctions.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\CreateRoom.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\PlayerDeckView.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\usePlayerLogin.js",["151"],"import { useContext } from \"react\";\r\n\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { useCookies } from 'react-cookie';\r\n\r\nimport { postRequest } from \"./utilityFunctions\";\r\n\r\nconst displayToast = (message, type, displayDuration) => {\r\n  toast(message, {\r\n    position: toast.POSITION.TOP_CENTER,\r\n    type: type,\r\n    autoClose: displayDuration,\r\n  });\r\n};\r\n\r\nexport default function useClassicGameAdmin(vars) { // You could use this var to set something on the local state.\r\n\r\n  var timeOutVar;\r\n\r\n  //states\r\n  \r\n  const [cookies, setCookie] = useCookies(['loginToken', 'userInfo']);\r\n\r\n  /*************** Dont edit below this line ***************/\r\n  function startTimeout() {\r\n    timeOutVar = setTimeout(function () {\r\n    console.log(\"Server Timeout\");\r\n    }, 120000);\r\n  }\r\n\r\n  function stopTimeout() {\r\n    clearTimeout(timeOutVar);\r\n  }\r\n\r\n  const onRequestSuccess = (req, resData, onSuccess) => {\r\n    const { data, oFlag, oMessage } = resData;\r\n    if (oFlag) {\r\n        onSuccess(data);\r\n    } else {\r\n        console.log(req, ': ', oMessage);\r\n    };\r\n    \r\n    displayToast(\r\n        oMessage,\r\n        oFlag ? toast.TYPE.SUCCESS : toast.TYPE.ERROR,\r\n        2500\r\n        );\r\n  };\r\n\r\n  const onRequestFail = (req, status) => {\r\n    console.log(\r\n      \"Server Error: Please contact your server administrator.\",\r\n    );\r\n    \r\n    displayToast(\r\n        status || 'Server Error',\r\n        toast.TYPE.ERROR,\r\n        2500\r\n        );\r\n  };\r\n\r\n  const makePostRequest = (req, api, dataparam, loginToken, onSuccess) => {\r\n    postRequest(api, dataparam, loginToken)\r\n      .then((res) => {\r\n        stopTimeout();\r\n        if (res.status !== 200 && res.status !== 201) {\r\n          onRequestFail(req, res.status);\r\n        } else {\r\n          onRequestSuccess(req, res.data, onSuccess);  \r\n        }\r\n      })\r\n      .catch((err) => {\r\n        stopTimeout();\r\n        console.log(\"makePostRequest_err: \", err);\r\n      });\r\n  };\r\n\r\n  /*************** Dont edit above this line ***************/\r\n\r\n  const makeRequest = (req, vars = {}) => {\r\n    var api = \"\";\r\n    var dataparam = {};\r\n    let onSuccess = () => {};\r\n\r\n    const {\r\n      roomId = '',\r\n      playerId = '',\r\n      password\r\n  } = vars;\r\n\r\n    startTimeout();\r\n    switch (req) {\r\n      // case \"get-player\":\r\n      //   const {playerId} = vars;\r\n      //   api = \"get-player\";\r\n      //   dataparam = {playerId}; // This are the parameters or arguments supplied on the post request.\r\n      //   onSuccess = (data) => { // This is a callback that executes at post request success. i.e. data is the res.data returned by the server\r\n            \r\n      //   }\r\n      //   break;\r\n    case \"login\" :\r\n        api = \"login\";\r\n        dataparam = {roomId, password};\r\n        onSuccess = (data) => {\r\n            const {loginToken} = data;\r\n            const maxAge = 24 * 60 * 60;\r\n            \r\n            setCookie('loginToken', loginToken, { path: '/', maxAge });\r\n            setCookie('userInfo', {roomId, userId: 'admin'}, { path: '/', maxAge });\r\n            window.location.reload();\r\n        };\r\n        break;\r\n    case \"player-login\" :\r\n        api = \"player-login\";\r\n        dataparam = {roomId, userId : playerId, playerCode: password};\r\n        onSuccess = (data) => {\r\n            const {loginToken, roomId, userId} = data;\r\n            const maxAge = 7 * 24 * 60 * 60;\r\n            \r\n            setCookie('loginToken', loginToken, { path: '/', maxAge });\r\n            setCookie('userInfo', {roomId, userId}, { path: '/', maxAge });\r\n        };\r\n        break;\r\n      default:\r\n    }\r\n    if (req !== \"\" || typeof req !== \"undefined\") makePostRequest(req, api, dataparam, '', onSuccess);\r\n  };\r\n\r\n  return [\r\n    cookies,\r\n    makeRequest,\r\n  ];\r\n}\r\n","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\CardView.js",[],["152","153"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\DeckViewLogin.js",["154","155","156"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\AddCardDialog.js",["157"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\DeleteCardDialog.js",["158"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\DialogScaffold.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\DeletePlayerDialog.js",["159","160"],{"ruleId":"161","severity":1,"message":"162","line":9,"column":3,"nodeType":"163","messageId":"164","endLine":9,"endColumn":7},{"ruleId":"161","severity":1,"message":"165","line":25,"column":10,"nodeType":"163","messageId":"164","endLine":25,"endColumn":14},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"166","replacedBy":"170"},{"ruleId":"168","replacedBy":"171"},{"ruleId":"161","severity":1,"message":"172","line":41,"column":7,"nodeType":"163","messageId":"164","endLine":41,"endColumn":19},{"ruleId":"166","replacedBy":"173"},{"ruleId":"168","replacedBy":"174"},{"ruleId":"161","severity":1,"message":"175","line":20,"column":12,"nodeType":"163","messageId":"164","endLine":20,"endColumn":21},{"ruleId":"161","severity":1,"message":"176","line":33,"column":38,"nodeType":"163","messageId":"164","endLine":33,"endColumn":47},{"ruleId":"177","severity":1,"message":"178","line":43,"column":8,"nodeType":"179","endLine":43,"endColumn":17,"suggestions":"180"},{"ruleId":"166","replacedBy":"181"},{"ruleId":"168","replacedBy":"182"},{"ruleId":"161","severity":1,"message":"183","line":18,"column":17,"nodeType":"163","messageId":"164","endLine":18,"endColumn":26},{"ruleId":"161","severity":1,"message":"184","line":80,"column":13,"nodeType":"163","messageId":"164","endLine":80,"endColumn":18},{"ruleId":"177","severity":1,"message":"185","line":199,"column":8,"nodeType":"179","endLine":199,"endColumn":17,"suggestions":"186"},{"ruleId":"177","severity":1,"message":"187","line":210,"column":10,"nodeType":"179","endLine":210,"endColumn":12,"suggestions":"188"},{"ruleId":"161","severity":1,"message":"189","line":8,"column":7,"nodeType":"163","messageId":"164","endLine":8,"endColumn":12},{"ruleId":"190","severity":1,"message":"191","line":56,"column":17,"nodeType":"192","messageId":"193","endLine":56,"endColumn":23},{"ruleId":"190","severity":1,"message":"191","line":59,"column":17,"nodeType":"192","messageId":"193","endLine":59,"endColumn":23},{"ruleId":"190","severity":1,"message":"191","line":62,"column":17,"nodeType":"192","messageId":"193","endLine":62,"endColumn":23},{"ruleId":"190","severity":1,"message":"191","line":65,"column":17,"nodeType":"192","messageId":"193","endLine":65,"endColumn":23},{"ruleId":"190","severity":1,"message":"191","line":68,"column":17,"nodeType":"192","messageId":"193","endLine":68,"endColumn":23},{"ruleId":"177","severity":1,"message":"194","line":103,"column":8,"nodeType":"179","endLine":103,"endColumn":21,"suggestions":"195"},{"ruleId":"177","severity":1,"message":"196","line":115,"column":8,"nodeType":"179","endLine":115,"endColumn":10,"suggestions":"197"},{"ruleId":"161","severity":1,"message":"183","line":18,"column":17,"nodeType":"163","messageId":"164","endLine":18,"endColumn":26},{"ruleId":"190","severity":1,"message":"191","line":120,"column":9,"nodeType":"192","messageId":"193","endLine":120,"endColumn":15},{"ruleId":"161","severity":1,"message":"198","line":3,"column":15,"nodeType":"163","messageId":"164","endLine":3,"endColumn":19},{"ruleId":"161","severity":1,"message":"199","line":3,"column":21,"nodeType":"163","messageId":"164","endLine":3,"endColumn":29},{"ruleId":"161","severity":1,"message":"200","line":3,"column":31,"nodeType":"163","messageId":"164","endLine":3,"endColumn":43},{"ruleId":"161","severity":1,"message":"201","line":20,"column":12,"nodeType":"163","messageId":"164","endLine":20,"endColumn":21},{"ruleId":"161","severity":1,"message":"202","line":1,"column":10,"nodeType":"163","messageId":"164","endLine":1,"endColumn":20},{"ruleId":"166","replacedBy":"203"},{"ruleId":"168","replacedBy":"204"},{"ruleId":"161","severity":1,"message":"205","line":4,"column":21,"nodeType":"163","messageId":"164","endLine":4,"endColumn":31},{"ruleId":"177","severity":1,"message":"206","line":44,"column":8,"nodeType":"179","endLine":44,"endColumn":17,"suggestions":"207"},{"ruleId":"177","severity":1,"message":"208","line":52,"column":8,"nodeType":"179","endLine":52,"endColumn":10,"suggestions":"209"},{"ruleId":"161","severity":1,"message":"210","line":31,"column":11,"nodeType":"163","messageId":"164","endLine":31,"endColumn":18},{"ruleId":"161","severity":1,"message":"210","line":31,"column":11,"nodeType":"163","messageId":"164","endLine":31,"endColumn":18},{"ruleId":"161","severity":1,"message":"211","line":2,"column":9,"nodeType":"163","messageId":"164","endLine":2,"endColumn":13},{"ruleId":"161","severity":1,"message":"210","line":13,"column":11,"nodeType":"163","messageId":"164","endLine":13,"endColumn":18},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Home' is defined but never used.","no-native-reassign",["212"],"no-negated-in-lhs",["213"],["212"],["213"],"'cards_static' is assigned a value but never used.",["212"],["213"],"'setRoomID' is assigned a value but never used.","'isLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'match.path', 'playerId', 'roomId', and 'setClassicGameAdmin'. Either include them or remove the dependency array.","ArrayExpression",["214"],["212"],["213"],"'setCookie' is assigned a value but never used.","'cards' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'roomId' and 'setClassicGameAdmin'. Either include them or remove the dependency array.",["215"],"React Hook useEffect has missing dependencies: 'cookies.userInfo', 'roomId', and 'setPickedCells'. Either include them or remove the dependency array.",["216"],"'bingo' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","React Hook useEffect has a missing dependency: 'intervalId'. Either include it or remove the dependency array.",["217"],"React Hook useEffect has missing dependencies: 'roomId' and 'setPickedCells'. Either include them or remove the dependency array.",["218"],"'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ariaLabel' is assigned a value but never used.","'useContext' is defined but never used.",["212"],["213"],"'withStyles' is defined but never used.","React Hook useEffect has a missing dependency: 'match.path'. Either include it or remove the dependency array.",["219"],"React Hook useEffect has missing dependencies: 'match.path' and 'roomId'. Either include them or remove the dependency array.",["220"],"'classes' is assigned a value but never used.","'Grid' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},"Update the dependencies array to be: [cookies, match.path, playerId, roomId, setClassicGameAdmin]",{"range":"235","text":"236"},"Update the dependencies array to be: [cookies, roomId, setClassicGameAdmin]",{"range":"237","text":"238"},"Update the dependencies array to be: [cookies.userInfo, roomId, setPickedCells]",{"range":"239","text":"240"},"Update the dependencies array to be: [intervalId, pickedCells]",{"range":"241","text":"242"},"Update the dependencies array to be: [roomId, setPickedCells]",{"range":"243","text":"244"},"Update the dependencies array to be: [cookies, match.path]",{"range":"245","text":"246"},"Update the dependencies array to be: [match.path, roomId]",{"range":"247","text":"248"},[1174,1183],"[cookies, match.path, playerId, roomId, setClassicGameAdmin]",[6043,6052],"[cookies, roomId, setClassicGameAdmin]",[6361,6363],"[cookies.userInfo, roomId, setPickedCells]",[2926,2939],"[intervalId, pickedCells]",[3237,3239],"[roomId, setPickedCells]",[1297,1306],"[cookies, match.path]",[1542,1544],"[match.path, roomId]"]