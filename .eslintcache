[{"D:\\Desktop\\bingo\\bingo-frontend\\src\\App.js":"1","D:\\Desktop\\bingo\\bingo-frontend\\src\\index.js":"2","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard.js":"3","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Lobby.js":"4","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\DeckView.js":"5","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\CardView.js":"6","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\Cards.js":"7","D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\useClassicGameAdmin.js":"8","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\Card.js":"9","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\ListBox.js":"10","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin.js":"11","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\GameDrawer.js":"12","D:\\Desktop\\bingo\\bingo-frontend\\src\\reportWebVitals.js":"13","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\Card.js":"14","D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\useGameDrawer.js":"15","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\NameDrawerView.js":"16","D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\utilityFunctions.js":"17","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\CreateRoom.js":"18","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\PlayerDeckView.js":"19","D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\usePlayerLogin.js":"20"},{"size":2237,"mtime":1616837981391,"results":"21","hashOfConfig":"22"},{"size":517,"mtime":1616811055374,"results":"23","hashOfConfig":"22"},{"size":6073,"mtime":1616814956214,"results":"24","hashOfConfig":"22"},{"size":2530,"mtime":1616814956214,"results":"25","hashOfConfig":"22"},{"size":1875,"mtime":1616850560419,"results":"26","hashOfConfig":"22"},{"size":2461,"mtime":1616814956213,"results":"27","hashOfConfig":"22"},{"size":922,"mtime":1616811055376,"results":"28","hashOfConfig":"22"},{"size":4085,"mtime":1616856391365,"results":"29","hashOfConfig":"22"},{"size":1546,"mtime":1616811055375,"results":"30","hashOfConfig":"22"},{"size":1132,"mtime":1616811055376,"results":"31","hashOfConfig":"22"},{"size":8499,"mtime":1616851514195,"results":"32","hashOfConfig":"22"},{"size":4905,"mtime":1616857832857,"results":"33","hashOfConfig":"22"},{"size":375,"mtime":1616811055377,"results":"34","hashOfConfig":"22"},{"size":1556,"mtime":1616814956213,"results":"35","hashOfConfig":"22"},{"size":3752,"mtime":1616858265583,"results":"36","hashOfConfig":"22"},{"size":1661,"mtime":1616811055376,"results":"37","hashOfConfig":"22"},{"size":731,"mtime":1616814956216,"results":"38","hashOfConfig":"22"},{"size":1849,"mtime":1616814956214,"results":"39","hashOfConfig":"22"},{"size":2966,"mtime":1616814956213,"results":"40","hashOfConfig":"22"},{"size":3659,"mtime":1616814956215,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"j62p19",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"45"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Desktop\\bingo\\bingo-frontend\\src\\App.js",["90","91"],"import './App.css';\r\n\r\nimport React, {useState} from 'react'\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\n\r\nimport { CookiesProvider } from 'react-cookie';\r\n\r\nimport Dashboard from './pages/Dashboard'\r\nimport CreateRoom from './pages/CreateRoom'\r\nimport Lobby from './pages/Lobby'\r\nimport ClassicAdmin from './pages/Classic/Admin'\r\nimport ClassicDeckView from './pages/Classic/DeckView'\r\nimport ClassicDeckViewLogin from './pages/Classic/DeckViewLogin'\r\nimport ClassicGameDrawer from './pages/Classic/GameDrawer'\r\n\r\nfunction Home() {\r\n  const [roomID, setRoomID] = useState(null) //create custom hook once grew\r\n  return (\r\n    <>\r\n      {roomID === null && <CreateRoom setRoomID={setRoomID}/>}\r\n      {roomID !== null && <Dashboard roomID={roomID}/>}\r\n      </>\r\n  );\r\n}\r\n\r\nfunction AdminRouter(props) {\r\n  const {roomId} = props;\r\n  const match = useRouteMatch();\r\n  return (\r\n    <Switch>\r\n    <Route path={`${match.path}/game-drawer`}>\r\n      <ClassicGameDrawer roomId={roomId} />\r\n    </Route>\r\n    <Route path={`${match.path}/`}>\r\n      <ClassicAdmin roomId={roomId} />\r\n    </Route>\r\n    </Switch>\r\n  )\r\n}\r\n\r\nfunction GameRoom() {\r\n  const {roomId} = useParams();\r\n  const match = useRouteMatch();\r\n  return (\r\n  <Switch>\r\n    <Route path={`${match.path}/admin`}>\r\n      <AdminRouter roomId={roomId}/>\r\n    </Route>\r\n    <Route path={`${match.path}/:playerId`}>\r\n      <ClassicDeckView roomId={roomId} />\r\n    </Route>\r\n    <Route path={`${match.path}/`}>\r\n      <ClassicDeckViewLogin roomId={roomId} />\r\n    </Route>\r\n  </Switch>);\r\n}\r\n\r\nfunction ClassicBingo() {\r\n  const match = useRouteMatch();\r\n  return(\r\n    <Switch>\r\n      <Route path={`${match.path}/:roomId`}>\r\n        <GameRoom/>\r\n      </Route>\r\n      <Route path={`${match.path}/`}>\r\n        <Lobby/>\r\n      </Route>\r\n    </Switch>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <CookiesProvider>\r\n      <Router>\r\n        <Switch>\r\n          <Route path='/classic'>\r\n            <ClassicBingo/>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            {/* <Home/> */}\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </CookiesProvider>\r\n  )\r\n}\r\n\r\nexport default App;\r\n",["92","93"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\index.js",[],["94","95"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard.js",["96"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Lobby.js",["97"],"import React from 'react'\r\n\r\nimport {Paper, Typography, TextField, Grid, Button} from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        padding: theme.spacing(1),\r\n        height: '100%'\r\n    },\r\n    paperRoot: {\r\n        padding: theme.spacing(2)\r\n    }\r\n    \r\n}))\r\n\r\nfunction Lobby(props) {\r\n    const {setRoomID} = props;\r\n    const classes = useStyles();\r\n\r\n    const handleCreateRoom = () => {\r\n        //const roomID = createRoom();\r\n        //setRoomID(roomID);\r\n    }\r\n\r\n    return(\r\n        <Grid container direction='row' justify='center' alignItems='center' className={classes.root}>\r\n            <Grid item md={6} sm={10} xs={12}>\r\n        <Paper classes={{root: classes.paperRoot}}>\r\n            <Grid container direction='column' justify='center' alignItems='center' spacing={2}>\r\n                <Grid item>\r\n                    <Typography variant='h3'>Tara Bingo!</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Grid container direction='column' spacing={1} justify='center' alignItems='center'>\r\n                        <Grid item>\r\n                            <TextField variant='outlined' label='Participation Code' margin=\"dense\"/>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button variant='outlined'>Join UPSCA Bingo</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Typography variant={'subtitle1'}>or</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Grid container direction='column' spacing={1} justify='center' alignItems='center'>\r\n                        <Grid item>\r\n                            <TextField variant='outlined' label='Room ID' margin=\"dense\"/>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button variant='outlined'>Join Room</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Typography variant={'subtitle1'}>or</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant='outlined' onClick={handleCreateRoom}>Create Room</Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n        </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Lobby;","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\DeckView.js",["98","99"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\CardView.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\Cards.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\useClassicGameAdmin.js",["100"],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\Card.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\ListBox.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin.js",["101","102","103","104"],"import React, {useEffect, useState} from 'react';\r\n\r\nimport {\r\n    Grid, \r\n    TextField, \r\n    Button, \r\n    Paper, \r\n    Typography, \r\n    Dialog, \r\n    DialogContent, \r\n    DialogActions,\r\n    Backdrop,\r\n    CircularProgress\r\n} from '@material-ui/core';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles'\r\n\r\nimport {useRouteMatch} from 'react-router-dom';\r\n\r\nimport useClassicGameAdmin from '../../util/useClassicGameAdmin';\r\nimport usePlayerLogin from '../../util/usePlayerLogin';\r\nimport PlayerDeckView from './Admin/PlayerDeckView';\r\nimport CardView from './CardView';\r\n\r\nimport useGameDrawer from '../../util/useGameDrawer';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        padding: theme.spacing(1),\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    paperRoot: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center'\r\n    },\r\n    deckViewGrid: {\r\n        minWidth: '66.7%'\r\n    }, \r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nconst CssTextField = withStyles({\r\n    root: {\r\n      \r\n      '& label.Mui-focused': {\r\n        color: 'rgba(255,248,6,0.8)',\r\n      },\r\n      '& label': {\r\n        color: 'rgba(255,255,255,0.8)',\r\n      },\r\n      '&:hover label': {\r\n        color: 'rgba(255,248,6,0.8)',\r\n      },\r\n      '& .MuiOutlinedInput-root': {\r\n        color: 'rgba(255,255,255,0.8)',\r\n        '& fieldset': {\r\n          borderColor: 'rgba(255,255,255,0.4)',\r\n        },\r\n        '&:hover fieldset': {\r\n          borderColor: 'rgba(255,248,6,0.4)',\r\n        },\r\n        '&.Mui-focused fieldset': {\r\n          borderColor: 'rgba(255,248,6,0.8)',\r\n        },\r\n      },\r\n    },\r\n  })(TextField);\r\n\r\nfunction ClassicAdmin(props) {\r\n    const {roomId} = props;\r\n    const classes = useStyles();\r\n    const match = useRouteMatch();\r\n\r\n    const [cookies, setPlayerLogin] = usePlayerLogin();\r\n    const  [cards = [], players = [], isLoading, setClassicGameAdmin] = useClassicGameAdmin();\r\n    const [pickedCells, setPickedCells] = useGameDrawer();\r\n    const [filteredList, setFilteredList] = useState([])\r\n    const [selectedCard, setSelectedCard] = useState({});\r\n    const [openCardDialog, setOpenCardDialog] = useState(false);\r\n\r\n    const handleCreatePlayer = e => {\r\n        e.preventDefault();\r\n        const {name, email, noOfCards} = e.target;\r\n        if (name.value.length < 1 || parseInt(noOfCards.value) < 1) {\r\n            alert('Incomplete player details!');\r\n            return;\r\n        }\r\n        setClassicGameAdmin('register-player', {\r\n            name: name.value,\r\n            email: email.value,\r\n            noOfCards: noOfCards.value,\r\n            roomId\r\n        });\r\n    };\r\n\r\n    const handleAdminLogin = e => {\r\n        e.preventDefault();\r\n        const password = e.target.password.value;\r\n        setPlayerLogin('login', {roomId, password});\r\n    };\r\n\r\n    const filterFx = searchTxt => item => {\r\n        const {id, name, email} = item.player;\r\n\r\n        const itemToString = `${id} ${name} ${email}`;\r\n\r\n        return (itemToString.toUpperCase().indexOf(searchTxt.toUpperCase()) >= 0);\r\n    }\r\n\r\n    const handleSearch = e => {\r\n        e.preventDefault();\r\n        const searchText = e.target.searchText.value;\r\n        if (searchText.length > 0) {\r\n          const filtered = players.filter(filterFx(searchText));\r\n          setFilteredList(filtered);\r\n        } else {\r\n            setFilteredList(players);\r\n        }\r\n    };\r\n\r\n    const handleSelectCard = (card) => {\r\n        setSelectedCard(card);\r\n        setOpenCardDialog(true);\r\n    };\r\n\r\n    const handleCloseCardDialog = () => {\r\n        setOpenCardDialog(false);\r\n        setSelectedCard({});\r\n    };\r\n\r\n    const handleGoToGameDrawer = () => {\r\n        let gameDrawerUrl = match.url\r\n\r\n        if (gameDrawerUrl[gameDrawerUrl.length - 1] === '/' ||\r\n          gameDrawerUrl[gameDrawerUrl.length - 1] === '\\\\') {\r\n            gameDrawerUrl += 'game-drawer';\r\n          } else {\r\n            gameDrawerUrl += '/game-drawer';\r\n          }\r\n        window.open(gameDrawerUrl);\r\n    }\r\n\r\n    useEffect(() => {\r\n      if (cookies.loginToken) {\r\n        setClassicGameAdmin(\"get-player-all\", { roomId });\r\n      }\r\n    }, [cookies]);\r\n    \r\n    useEffect(() => {\r\n        setFilteredList(players);\r\n      }, [players]);\r\n\r\n      useEffect(()=> {\r\n        document.title = 'BINGO! Admin';\r\n        setPickedCells('get-picked-cells', {roomId});\r\n      }, [])\r\n\r\n    return (\r\n        <Grid container direction='column' justify='center' alignItems='center' spacing={2} className={classes.root}>\r\n        <Grid item md={6} sm={10} xs={12}>\r\n    <Paper classes={{root: classes.paperRoot}}>\r\n        <Grid container direction='column' justify='center' alignItems='center' spacing={2}>\r\n            <Grid item>\r\n                <Typography variant='h3'>Room {roomId} Game Master</Typography>\r\n            </Grid>\r\n            {!cookies.loginToken ? \r\n                <Grid item>\r\n                    <form onSubmit={handleAdminLogin}>\r\n                    <Grid container direction='row' spacing={1} justify='center' alignItems='center'>\r\n                        <Grid item md={6} sm={12}>\r\n                            <TextField variant='outlined' label='Password' name='password' type='password' margin=\"dense\" fullWidth/>\r\n                        </Grid>\r\n                        <Grid item md={2} sm={12}>\r\n                            <Button variant='contained' type='submit' fullWidth>Login</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    </form>\r\n                </Grid>\r\n            :\r\n            <React.Fragment>\r\n                <Grid item>\r\n                    <form onSubmit={handleCreatePlayer}>\r\n                    <Grid container direction='row' spacing={1} justify='center' alignItems='center'>\r\n                        <Grid item md={3} sm={12}>\r\n                            <TextField variant='outlined' label='Name' name='name' margin=\"dense\" fullWidth/>\r\n                        </Grid>\r\n                        <Grid item md={4} sm={12}>\r\n                            <TextField variant='outlined' label='Email' name='email' margin=\"dense\" fullWidth/>\r\n                        </Grid>\r\n                        <Grid item md={3} sm={12}>\r\n                            <TextField variant='outlined' label='No of Cards' name='noOfCards' margin=\"dense\" fullWidth/>\r\n                        </Grid>\r\n                        <Grid item md={2} sm={12}>\r\n                            <Button variant='contained' type='submit' fullWidth>Create Player</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    </form>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button variant='contained' onClick={handleGoToGameDrawer} >Game Draw</Button>\r\n                </Grid>\r\n            </React.Fragment>\r\n            }\r\n        </Grid>\r\n    </Paper>\r\n    </Grid>\r\n    <Grid item xs={12}>\r\n        <form onSubmit={handleSearch}>\r\n            <Grid container direction='row' spacing={1} alignItems='center'> \r\n                <Grid item>\r\n                    <CssTextField\r\n                        label=\"Search Player\"\r\n                        variant=\"outlined\"\r\n                        size='small'\r\n                        id=\"custom-css-outlined-input\"\r\n                        name='searchText'\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button type='submit' variant='contained' fullWidth>Search</Button>\r\n                </Grid>\r\n            </Grid>  \r\n        </form>\r\n    </Grid>\r\n    {filteredList.map(item => (\r\n        <Grid item  md={8} sm={12} xs={12} key={`${item.player.id}-deck-view`} className={classes.deckViewGrid} >\r\n            <PlayerDeckView items={item.cards} playerInfo={item.player} onSelectCard={handleSelectCard} />\r\n        </Grid>\r\n    ))}\r\n    <Dialog open={openCardDialog} onClose={handleCloseCardDialog}>\r\n        <DialogContent>\r\n            <CardView items={selectedCard.cells} cardId={selectedCard.id} />\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button onClick={handleCloseCardDialog}>Close</Button>\r\n            <Button variant='contained'>Simulate</Button>\r\n        </DialogActions>\r\n    </Dialog>\r\n    <Backdrop className={classes.backdrop} open={isLoading}>\r\n        <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n    </Grid>\r\n    )\r\n  }\r\n\r\n  export default ClassicAdmin;","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\GameDrawer.js",["105","106","107","108","109","110","111","112"],"import React, {useEffect, useState} from 'react';\r\n\r\nimport {Grid, Button, Typography, Paper} from '@material-ui/core';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nimport useGameDrawer from '../../util/useGameDrawer';\r\n\r\nconst bingo = {\r\n    B: [1,15],\r\n    I: [16, 30],\r\n    N: [31,45],\r\n    G: [46,60],\r\n    O: [61,75],\r\n}\r\n\r\nconst useStyles = makeStyles(theme=> ({\r\n    gridRoot: {\r\n        minHeight: '105%'\r\n    },\r\n    roundPaper: {\r\n        width: '80px',\r\n        height: '80px',\r\n        borderRadius: '100%',\r\n    },\r\n    centeredTypography: {\r\n        textAlign: 'center',\r\n        paddingTop: '25px'\r\n    },\r\n    h1Typography: {\r\n        fontSize: '15em',\r\n        color: 'white',\r\n        textShadow: '2px 2px 4px #000000'\r\n    },\r\n    h5Typography: {\r\n        color: 'white',\r\n        textShadow: '2px 2px 4px #000000',\r\n        paddingTop: theme.spacing(3)\r\n    }\r\n}));\r\n\r\nconst GameDrawer = props => {\r\n    const {roomId} = props;\r\n    const classes = useStyles();\r\n\r\n    const [pickedCells, setPickedCells] = useGameDrawer();\r\n    const [letter, setLetter] = useState('');\r\n    const [number, setNumber] = useState(0);\r\n    const [intervalId, setIntervalId] = useState(NaN);\r\n    const [isWaiting, setIsWaiting] = useState(false);\r\n    const [pickedCellsForDisplay, setPickedCellsForDisplay] = useState([]);\r\n\r\n    const getLetter = number_ => {\r\n        switch (true) {\r\n            case (number_ < 16):\r\n                return('B')\r\n                break;\r\n            case (number_ < 31):\r\n                return('I')\r\n                break;\r\n            case (number_ < 46):\r\n                return('N')\r\n                break;\r\n            case (number_ < 61):\r\n                return('G')\r\n                break;\r\n            case (number_ <= 75):\r\n                return('O')\r\n                break;\r\n            default:\r\n                break;\r\n        };\r\n    };\r\n\r\n    const handleDrawNumber = () => {\r\n        setPickedCells('pick-cell', {roomId});\r\n        const rangeStart = 1;\r\n        const rangeEnd = 75;\r\n\r\n        setIsWaiting(true);\r\n        const intervalId_ = setInterval(() => {\r\n            const randomFloat = Math.random();\r\n            setNumber(Math.floor(randomFloat * (rangeEnd - rangeStart)) + rangeStart);\r\n        }, 50);\r\n        setIntervalId(intervalId_);\r\n    };\r\n\r\n    useEffect(()=> {\r\n        if (!isNaN(intervalId)) {\r\n            setTimeout(() => {\r\n                clearInterval(intervalId);\r\n                setNumber(pickedCells[pickedCells.length - 1]);\r\n                setIsWaiting(false);\r\n\r\n                const pickedCells_ = [...pickedCells];\r\n                pickedCells_.reverse();\r\n                setPickedCellsForDisplay(pickedCells_);\r\n            }, 2000);\r\n        } else {\r\n            const pickedCells_ = [...pickedCells];\r\n            pickedCells_.reverse();\r\n            setPickedCellsForDisplay(pickedCells_);\r\n        }\r\n    }, [pickedCells]);\r\n\r\n    useEffect(()=>{\r\n        if (number > 0) {\r\n            const letter_ = getLetter(number);\r\n            setLetter(letter_);\r\n        }\r\n    }, [number]);\r\n    \r\n    useEffect(()=> {\r\n        setPickedCells('get-picked-cells', {roomId});\r\n        document.title = 'BINGO! Picker';\r\n    }, []);\r\n\r\n    return(\r\n        <Grid container direction='column' alignItems='center' spacing={4} className={classes.gridRoot}>\r\n            <Grid item>\r\n                <Typography variant='h5' className={classes.h5Typography}>\r\n                    Classic Bingo - Room {roomId}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography variant='h1' className={classes.h1Typography}>\r\n                    {letter} {number > 0 && number}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Button \r\n                    variant='outlined' \r\n                    onClick={handleDrawNumber} \r\n                    disabled={isWaiting || pickedCells.length === 75} \r\n                    >\r\n                    {pickedCells.length === 75 ? 'All numbers picked.' : 'Draw Number'}</Button>\r\n            </Grid>\r\n            <Grid item>\r\n                <Grid container direction='row' spacing={2} justify='flex-start'>\r\n                    {pickedCellsForDisplay.map(item=> {\r\n                        const letter_ = getLetter(item);\r\n                        return (\r\n                            <Grid item key={`${item}-ball-grid`}>\r\n                                <Paper elevation={3} className={classes.roundPaper}>\r\n                                    <Typography variant='h5' className={classes.centeredTypography}>{letter_} {item}</Typography>\r\n                                </Paper>\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default GameDrawer;","D:\\Desktop\\bingo\\bingo-frontend\\src\\reportWebVitals.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\Card.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\useGameDrawer.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Dashboard\\NameDrawerView.js",["113","114","115","116"],"import React, {useState} from 'react'\r\n\r\nimport {Grid, List, ListItem, ListItemText, Typography, Button} from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root: {\r\n        minHeight: '100%'\r\n    },\r\n    list: {\r\n        maxHeight: '100%'\r\n    }\r\n}))\r\n\r\nconst filterFunc = (pickedNames) => (val) => {\r\n    return (!pickedNames.includes(val))\r\n}\r\n\r\nfunction NameDrawerView(props) {\r\n    const {ariaLabel = 'picked list', names = [], pickedNames = [], setPickedNames} = props;\r\n    const [disabled, setDisabled] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    const [pickedName, setPickedName] = useState('')\r\n\r\n    const draw = () => {\r\n        const pickedNames_copy = [...pickedNames]\r\n        const pool = names.filter(filterFunc(pickedNames))\r\n        const random_index = Math.floor(Math.random() * pool.length)\r\n\r\n        console.log(pool[random_index])\r\n        if (random_index >= pool.length) {\r\n            setDisabled(true)\r\n            return;\r\n        }\r\n\r\n        pickedNames_copy.unshift(pool[random_index])\r\n\r\n        setPickedName(pool[random_index])\r\n        setPickedNames(pickedNames_copy)\r\n    }\r\n\r\n    return(\r\n        <Grid container direction='column' justify='flex-start' className={classes.root}>\r\n            <Grid item>\r\n                <Typography variant='h4'>{pickedName || 'BINGO Picker'}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <Button variant='contained' disabled={disabled} onClick={()=>draw()} >Draw a Name</Button>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default NameDrawerView;","D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\utilityFunctions.js",["117"],"import axios from \"axios\";\r\n\r\n//API URL\r\nlet WEB_SERVER_URL;\r\nif (\r\n  window.location.protocol === \"https:\" ||\r\n  window.location.hostname === \"sdddev2.treasury.gov.ph\"\r\n)\r\n  WEB_SERVER_URL = \"https://us-central1-bingo-project-2c67d.cloudfunctions.net/app/\";\r\n//TODO\r\nelse WEB_SERVER_URL = \"https://us-central1-bingo-project-2c67d.cloudfunctions.net/app/\";\r\n\r\nconst WEB_SERVER_API_URL = WEB_SERVER_URL + \"api/\";\r\n\r\nexport const postRequest = (action, dataParameters, loginToken) => {\r\n  return axios({\r\n    method: \"post\",\r\n    url: WEB_SERVER_URL + action,\r\n    data: dataParameters,\r\n    timeout: 30000,\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: \"Bearer \" + loginToken,\r\n    },\r\n  });\r\n};\r\n","D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\CreateRoom.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\pages\\Classic\\Admin\\PlayerDeckView.js",[],"D:\\Desktop\\bingo\\bingo-frontend\\src\\util\\usePlayerLogin.js",["118"],{"ruleId":"119","severity":1,"message":"120","line":9,"column":3,"nodeType":"121","messageId":"122","endLine":9,"endColumn":7},{"ruleId":"119","severity":1,"message":"123","line":24,"column":10,"nodeType":"121","messageId":"122","endLine":24,"endColumn":14},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"124","replacedBy":"128"},{"ruleId":"126","replacedBy":"129"},{"ruleId":"119","severity":1,"message":"130","line":41,"column":7,"nodeType":"121","messageId":"122","endLine":41,"endColumn":19},{"ruleId":"119","severity":1,"message":"131","line":18,"column":12,"nodeType":"121","messageId":"122","endLine":18,"endColumn":21},{"ruleId":"119","severity":1,"message":"132","line":33,"column":38,"nodeType":"121","messageId":"122","endLine":33,"endColumn":47},{"ruleId":"133","severity":1,"message":"134","line":43,"column":8,"nodeType":"135","endLine":43,"endColumn":17,"suggestions":"136"},{"ruleId":"119","severity":1,"message":"137","line":18,"column":17,"nodeType":"121","messageId":"122","endLine":18,"endColumn":26},{"ruleId":"119","severity":1,"message":"138","line":77,"column":13,"nodeType":"121","messageId":"122","endLine":77,"endColumn":18},{"ruleId":"119","severity":1,"message":"139","line":78,"column":12,"nodeType":"121","messageId":"122","endLine":78,"endColumn":23},{"ruleId":"133","severity":1,"message":"140","line":149,"column":8,"nodeType":"135","endLine":149,"endColumn":17,"suggestions":"141"},{"ruleId":"133","severity":1,"message":"142","line":158,"column":10,"nodeType":"135","endLine":158,"endColumn":12,"suggestions":"143"},{"ruleId":"119","severity":1,"message":"144","line":8,"column":7,"nodeType":"121","messageId":"122","endLine":8,"endColumn":12},{"ruleId":"145","severity":1,"message":"146","line":56,"column":17,"nodeType":"147","messageId":"148","endLine":56,"endColumn":23},{"ruleId":"145","severity":1,"message":"146","line":59,"column":17,"nodeType":"147","messageId":"148","endLine":59,"endColumn":23},{"ruleId":"145","severity":1,"message":"146","line":62,"column":17,"nodeType":"147","messageId":"148","endLine":62,"endColumn":23},{"ruleId":"145","severity":1,"message":"146","line":65,"column":17,"nodeType":"147","messageId":"148","endLine":65,"endColumn":23},{"ruleId":"145","severity":1,"message":"146","line":68,"column":17,"nodeType":"147","messageId":"148","endLine":68,"endColumn":23},{"ruleId":"133","severity":1,"message":"149","line":103,"column":8,"nodeType":"135","endLine":103,"endColumn":21,"suggestions":"150"},{"ruleId":"133","severity":1,"message":"142","line":115,"column":8,"nodeType":"135","endLine":115,"endColumn":10,"suggestions":"151"},{"ruleId":"119","severity":1,"message":"152","line":3,"column":15,"nodeType":"121","messageId":"122","endLine":3,"endColumn":19},{"ruleId":"119","severity":1,"message":"153","line":3,"column":21,"nodeType":"121","messageId":"122","endLine":3,"endColumn":29},{"ruleId":"119","severity":1,"message":"154","line":3,"column":31,"nodeType":"121","messageId":"122","endLine":3,"endColumn":43},{"ruleId":"119","severity":1,"message":"155","line":20,"column":12,"nodeType":"121","messageId":"122","endLine":20,"endColumn":21},{"ruleId":"119","severity":1,"message":"156","line":13,"column":7,"nodeType":"121","messageId":"122","endLine":13,"endColumn":25},{"ruleId":"119","severity":1,"message":"157","line":1,"column":10,"nodeType":"121","messageId":"122","endLine":1,"endColumn":20},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Home' is defined but never used.","no-native-reassign",["158"],"no-negated-in-lhs",["159"],["158"],["159"],"'cards_static' is assigned a value but never used.","'setRoomID' is assigned a value but never used.","'isLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'match.path', 'playerId', 'roomId', and 'setClassicGameAdmin'. Either include them or remove the dependency array.","ArrayExpression",["160"],"'setCookie' is assigned a value but never used.","'cards' is assigned a value but never used.","'pickedCells' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'roomId' and 'setClassicGameAdmin'. Either include them or remove the dependency array.",["161"],"React Hook useEffect has missing dependencies: 'roomId' and 'setPickedCells'. Either include them or remove the dependency array.",["162"],"'bingo' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","React Hook useEffect has a missing dependency: 'intervalId'. Either include it or remove the dependency array.",["163"],["164"],"'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ariaLabel' is assigned a value but never used.","'WEB_SERVER_API_URL' is assigned a value but never used.","'useContext' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"169","fix":"173"},"Update the dependencies array to be: [cookies, match.path, playerId, roomId, setClassicGameAdmin]",{"range":"174","text":"175"},"Update the dependencies array to be: [cookies, roomId, setClassicGameAdmin]",{"range":"176","text":"177"},"Update the dependencies array to be: [roomId, setPickedCells]",{"range":"178","text":"179"},"Update the dependencies array to be: [intervalId, pickedCells]",{"range":"180","text":"181"},{"range":"182","text":"179"},[1174,1183],"[cookies, match.path, playerId, roomId, setClassicGameAdmin]",[4217,4226],"[cookies, roomId, setClassicGameAdmin]",[4448,4450],"[roomId, setPickedCells]",[2926,2939],"[intervalId, pickedCells]",[3237,3239]]